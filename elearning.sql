-- MySQL dump 10.13  Distrib 8.0.26, for Win64 (x86_64)
--
-- Host: localhost    Database: elearning
-- ------------------------------------------------------
-- Server version	8.0.26

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `categories`
--

DROP TABLE IF EXISTS `categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `categories` (
  `cat_id` int NOT NULL AUTO_INCREMENT,
  `cat_name` varchar(32) DEFAULT NULL,
  `slug` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`cat_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `categories`
--

LOCK TABLES `categories` WRITE;
/*!40000 ALTER TABLE `categories` DISABLE KEYS */;
INSERT INTO `categories` VALUES (1,'Development','development'),(2,'Design','design'),(3,'Management','management'),(8,'Mobile','mobile');
/*!40000 ALTER TABLE `categories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `course_categories`
--

DROP TABLE IF EXISTS `course_categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `course_categories` (
  `course_id` int NOT NULL,
  `category_id` int NOT NULL,
  `course_type` varchar(32) DEFAULT 'course',
  PRIMARY KEY (`course_id`,`category_id`),
  KEY `course_categories_category_fk` (`category_id`),
  CONSTRAINT `course_categories_category_fk` FOREIGN KEY (`category_id`) REFERENCES `categories` (`cat_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `course_categories`
--

LOCK TABLES `course_categories` WRITE;
/*!40000 ALTER TABLE `course_categories` DISABLE KEYS */;
INSERT INTO `course_categories` VALUES (1,1,'course_video'),(4,1,'course'),(4,8,'course'),(5,1,'course_video'),(59,1,'course'),(60,1,'course'),(71,1,'course');
/*!40000 ALTER TABLE `course_categories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `course_programming_languages`
--

DROP TABLE IF EXISTS `course_programming_languages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `course_programming_languages` (
  `course_id` int NOT NULL,
  `programming_language_id` int NOT NULL,
  `course_type` varchar(32) DEFAULT 'course',
  PRIMARY KEY (`course_id`,`programming_language_id`),
  KEY `course_programming_language_language_fk` (`programming_language_id`),
  CONSTRAINT `course_programming_language_language_fk` FOREIGN KEY (`programming_language_id`) REFERENCES `programming_languages` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `course_programming_languages`
--

LOCK TABLES `course_programming_languages` WRITE;
/*!40000 ALTER TABLE `course_programming_languages` DISABLE KEYS */;
INSERT INTO `course_programming_languages` VALUES (4,1,'course'),(4,3,'course'),(4,17,'course'),(5,27,'course_video'),(71,27,'course');
/*!40000 ALTER TABLE `course_programming_languages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `course_question_answer`
--

DROP TABLE IF EXISTS `course_question_answer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `course_question_answer` (
  `question_id` int NOT NULL,
  `option_answer_id` int NOT NULL,
  PRIMARY KEY (`question_id`,`option_answer_id`),
  KEY `course_question_answer_option_fk` (`option_answer_id`),
  CONSTRAINT `course_question_answer_option_fk` FOREIGN KEY (`option_answer_id`) REFERENCES `course_question_options` (`id`),
  CONSTRAINT `course_question_answer_question_fk` FOREIGN KEY (`question_id`) REFERENCES `course_questions` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `course_question_answer`
--

LOCK TABLES `course_question_answer` WRITE;
/*!40000 ALTER TABLE `course_question_answer` DISABLE KEYS */;
INSERT INTO `course_question_answer` VALUES (3,9),(4,14),(4,16),(5,19),(6,21),(7,25),(7,27),(8,31),(9,34),(13,66);
/*!40000 ALTER TABLE `course_question_answer` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `course_question_options`
--

DROP TABLE IF EXISTS `course_question_options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `course_question_options` (
  `id` int NOT NULL AUTO_INCREMENT,
  `question_id` int DEFAULT NULL,
  `content` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `course_question_option_fk` (`question_id`),
  CONSTRAINT `course_question_option_fk` FOREIGN KEY (`question_id`) REFERENCES `course_questions` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=70 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `course_question_options`
--

LOCK TABLES `course_question_options` WRITE;
/*!40000 ALTER TABLE `course_question_options` DISABLE KEYS */;
INSERT INTO `course_question_options` VALUES (9,3,'PHP: Hypertext Preprocessor'),(10,3,'Private Home Page'),(11,3,'Personal Hypertext Processor'),(12,3,'Hypertext Transfer Protoco'),(13,4,'Document.Write(\"Hello World\")'),(14,4,'echo \"Hello World\"'),(15,4,'\"Hello World\"'),(16,4,'print \"Hello World\"'),(17,5,'Class creation'),(18,5,'Object creation'),(19,5,'Object instantiation'),(20,5,'Class instantiation'),(21,6,'<?php ?>'),(22,6,'< php >'),(23,6,'< ? php ?>'),(24,6,'<? ?>'),(25,7,'#'),(26,7,'\\\\'),(27,7,'/* */'),(28,7,'All of the mentioned'),(29,8,'functionName(parameters) {function body}'),(30,8,'function {function body}'),(31,8,'function functionName(parameters) {function body}'),(32,8,'data type functionName(parameters) {function body}'),(33,9,'$3hello'),(34,9,'$_hello'),(35,9,'$this'),(36,9,'$5_Hello'),(66,13,'6'),(67,13,'3'),(68,13,'4'),(69,13,'5');
/*!40000 ALTER TABLE `course_question_options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `course_questions`
--

DROP TABLE IF EXISTS `course_questions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `course_questions` (
  `id` int NOT NULL AUTO_INCREMENT,
  `question` text,
  `quiz_id` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `course_question_quiz_fk` (`quiz_id`),
  CONSTRAINT `course_question_quiz_fk` FOREIGN KEY (`quiz_id`) REFERENCES `course_quizz` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `course_questions`
--

LOCK TABLES `course_questions` WRITE;
/*!40000 ALTER TABLE `course_questions` DISABLE KEYS */;
INSERT INTO `course_questions` VALUES (3,'What does PHP stand for?',1),(4,'How do you write \"Hello World\" in PHP',1),(5,'The practice of creating objects based on predefined classes is often referred to as..',1),(6,'Which of the following is the correct syntax to write a PHP code?',2),(7,'Which of the following is the correct way to add a comment in PHP code?',2),(8,'How to define a function in PHP?',2),(9,'Which is the right way of declaring a variable in PHP?',2),(13,'What will be the output of the following PHP program?\r\n\r\n\r\n&lt;?php\r\n$fruits = array (&quot;apple&quot;, &quot;orange&quot;, array (&quot;pear&quot;, &quot;mango&quot;),&quot;banana&quot;);\r\necho (count($fruits, 1));\r\n?&gt;',2);
/*!40000 ALTER TABLE `course_questions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `course_quizz`
--

DROP TABLE IF EXISTS `course_quizz`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `course_quizz` (
  `id` int NOT NULL AUTO_INCREMENT,
  `quiz_name` varchar(255) DEFAULT NULL,
  `course_id` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `quizz_course_fk` (`course_id`),
  CONSTRAINT `quizz_course_fk` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `course_quizz`
--

LOCK TABLES `course_quizz` WRITE;
/*!40000 ALTER TABLE `course_quizz` DISABLE KEYS */;
INSERT INTO `course_quizz` VALUES (1,'Mid term',1),(2,'Final term',71),(4,'Mid term',1),(5,'Final term',1);
/*!40000 ALTER TABLE `course_quizz` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `course_topics`
--

DROP TABLE IF EXISTS `course_topics`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `course_topics` (
  `id` int NOT NULL AUTO_INCREMENT,
  `course_id` int DEFAULT NULL,
  `description` text,
  `topic_name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `course_fk` (`course_id`),
  CONSTRAINT `course_fk` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=66 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `course_topics`
--

LOCK TABLES `course_topics` WRITE;
/*!40000 ALTER TABLE `course_topics` DISABLE KEYS */;
INSERT INTO `course_topics` VALUES (1,1,'<h1 style=\"margin-left:200px\"><span style=\"color:#3498db\"><strong>Java Tutorial</strong></span></h1>\r\n\r\n<p>Java is a high-level programming language originally developed by Sun Microsystems and released in 1995. Java runs on a variety of platforms, such as Windows, Mac OS, and the various versions of UNIX. This tutorial gives a complete understanding of Java. This reference will take you through simple and practical approaches while learning Java Programming language.</p>\r\n\r\n<h1>Audience</h1>\r\n\r\n<p>This tutorial has been prepared for the beginners to help them understand the basic to advanced concepts related to Java Programming language.</p>\r\n\r\n<h1>Prerequisites</h1>\r\n\r\n<p>Before you start practicing various types of examples given in this reference, we assume that you are already aware about computer programs and computer programming languages.</p>\r\n','JAVA_HOME'),(2,1,'<h1 style=\"margin-left:160px\"><span style=\"color:#3498db\"><strong>Java - Overview</strong></span></h1>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Java programming language was originally developed by Sun Microsystems which was initiated by James Gosling and released in 1995 as core component of Sun Microsystems&#39; Java platform (Java 1.0 [J2SE]).</p>\r\n\r\n<p>The latest release of the Java Standard Edition is Java SE 8. With the advancement of Java and its widespread popularity, multiple configurations were built to suit various types of platforms. For example: J2EE for Enterprise Applications, J2ME for Mobile Applications.</p>\r\n\r\n<p>The new J2 versions were renamed as Java SE, Java EE, and Java ME respectively. Java is guaranteed to be&nbsp;<strong>Write Once, Run Anywhere.</strong></p>\r\n\r\n<p>Java is &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Object Oriented</strong>&nbsp;&minus; In Java, everything is an Object. Java can be easily extended since it is based on the Object model.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Platform Independent</strong>&nbsp;&minus; Unlike many other programming languages including C and C++, when Java is compiled, it is not compiled into platform specific machine, rather into platform independent byte code. This byte code is distributed over the web and interpreted by the Virtual Machine (JVM) on whichever platform it is being run on.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Simple</strong>&nbsp;&minus; Java is designed to be easy to learn. If you understand the basic concept of OOP Java, it would be easy to master.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Secure</strong>&nbsp;&minus; With Java&#39;s secure feature it enables to develop virus-free, tamper-free systems. Authentication techniques are based on public-key encryption.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Architecture-neutral</strong>&nbsp;&minus; Java compiler generates an architecture-neutral object file format, which makes the compiled code executable on many processors, with the presence of Java runtime system.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Portable</strong>&nbsp;&minus; Being architecture-neutral and having no implementation dependent aspects of the specification makes Java portable. Compiler in Java is written in ANSI C with a clean portability boundary, which is a POSIX subset.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Robust</strong>&nbsp;&minus; Java makes an effort to eliminate error prone situations by emphasizing mainly on compile time error checking and runtime checking.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Multithreaded</strong>&nbsp;&minus; With Java&#39;s multithreaded feature it is possible to write programs that can perform many tasks simultaneously. This design feature allows the developers to construct interactive applications that can run smoothly.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Interpreted</strong>&nbsp;&minus; Java byte code is translated on the fly to native machine instructions and is not stored anywhere. The development process is more rapid and analytical since the linking is an incremental and light-weight process.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>High Performance</strong>&nbsp;&minus; With the use of Just-In-Time compilers, Java enables high performance.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Distributed</strong>&nbsp;&minus; Java is designed for the distributed environment of the internet.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Dynamic</strong>&nbsp;&minus; Java is considered to be more dynamic than C or C++ since it is designed to adapt to an evolving environment. Java programs can carry extensive amount of run-time information that can be used to verify and resolve accesses to objects on run-time.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>History of Java</h2>\r\n\r\n<p>James Gosling initiated Java language project in June 1991 for use in one of his many set-top box projects. The language, initially called &lsquo;Oak&rsquo; after an oak tree that stood outside Gosling&#39;s office, also went by the name &lsquo;Green&rsquo; and ended up later being renamed as Java, from a list of random words.</p>\r\n\r\n<p>Sun released the first public implementation as Java 1.0 in 1995. It promised&nbsp;<strong>Write Once, Run Anywhere</strong>&nbsp;(WORA), providing no-cost run-times on popular platforms.</p>\r\n\r\n<p>On 13 November, 2006, Sun released much of Java as free and open source software under the terms of the GNU General Public License (GPL).</p>\r\n\r\n<p>On 8 May, 2007, Sun finished the process, making all of Java&#39;s core code free and open-source, aside from a small portion of code to which Sun did not hold the copyright.</p>\r\n\r\n<h2>Tools You Will Need</h2>\r\n\r\n<p>For performing the examples discussed in this tutorial, you will need a Pentium 200-MHz computer with a minimum of 64 MB of RAM (128 MB of RAM recommended).</p>\r\n\r\n<p>You will also need the following softwares &minus;</p>\r\n\r\n<ul>\r\n	<li>Linux 7.1 or Windows xp/7/8 operating system</li>\r\n	<li>Java JDK 8</li>\r\n	<li>Microsoft Notepad or any other text editor</li>\r\n</ul>\r\n\r\n<p>This tutorial will provide the necessary skills to create GUI, networking, and web applications using Java.</p>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>The next chapter will guide you to how you can obtain Java and its documentation. Finally, it instructs you on how to install Java and prepare an environment to develop Java applications.</p>\r\n','Java - Overview'),(21,4,'<h2>What is Android?</h2>\r\n\r\n<p><img alt=\"Who I Am\" src=\"https://www.tutorialspoint.com/android/images/who_i_am.jpg\" /></p>\r\n\r\n<p>Android is an open source and Linux-based&nbsp;<strong>Operating System</strong>&nbsp;for mobile devices such as smartphones and tablet computers. Android was developed by the&nbsp;<em>Open Handset Alliance</em>, led by Google, and other companies.</p>\r\n\r\n<p>Android offers a unified approach to application development for mobile devices which means developers need only develop for Android, and their applications should be able to run on different devices powered by Android.</p>\r\n\r\n<p>The first beta version of the Android Software Development Kit (SDK) was released by Google in 2007 where as the first commercial version, Android 1.0, was released in September 2008.</p>\r\n\r\n<p>On June 27, 2012, at the Google I/O conference, Google announced the next Android version, 4.1&nbsp;<strong>Jelly Bean</strong>. Jelly Bean is an incremental update, with the primary aim of improving the user interface, both in terms of functionality and performance.</p>\r\n\r\n<p>The source code for Android is available under free and open source software licenses. Google publishes most of the code under the Apache License version 2.0 and the rest, Linux kernel changes, under the GNU General Public License version 2.</p>\r\n\r\n<h2>Why Android ?</h2>\r\n\r\n<p><img alt=\"Why Android\" src=\"https://www.tutorialspoint.com/android/images/why_android.jpg\" /></p>\r\n\r\n<h2>Features of Android</h2>\r\n\r\n<p>Android is a powerful operating system competing with Apple 4GS and supports great features. Few of them are listed below &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>\r\n			<h2>What is Android?</h2>\r\n			<img alt=\"Who I Am\" src=\"https://www.tutorialspoint.com/android/images/who_i_am.jpg\" />\r\n			<p>Android is an open source and Linux-based&nbsp;<strong>Operating System</strong>&nbsp;for mobile devices such as smartphones and tablet computers. Android was developed by the&nbsp;<em>Open Handset Alliance</em>, led by Google, and other companies.</p>\r\n\r\n			<p>Android offers a unified approach to application development for mobile devices which means developers need only develop for Android, and their applications should be able to run on different devices powered by Android.</p>\r\n\r\n			<p>The first beta version of the Android Software Development Kit (SDK) was released by Google in 2007 where as the first commercial version, Android 1.0, was released in September 2008.</p>\r\n\r\n			<p>On June 27, 2012, at the Google I/O conference, Google announced the next Android version, 4.1&nbsp;<strong>Jelly Bean</strong>. Jelly Bean is an incremental update, with the primary aim of improving the user interface, both in terms of functionality and performance.</p>\r\n\r\n			<p>The source code for Android is available under free and open source software licenses. Google publishes most of the code under the Apache License version 2.0 and the rest, Linux kernel changes, under the GNU General Public License version 2.</p>\r\n\r\n			<h2>Why Android ?</h2>\r\n			<img alt=\"Why Android\" src=\"https://www.tutorialspoint.com/android/images/why_android.jpg\" />\r\n			<h2>Features of Android</h2>\r\n\r\n			<p>Android is a powerful operating system competing with Apple 4GS and supports great features. Few of them are listed below &minus;</p>\r\n\r\n			<table>\r\n				<tbody>\r\n					<tr>\r\n						<th>Sr.No.</th>\r\n						<th>Feature &amp; Description</th>\r\n					</tr>\r\n					<tr>\r\n						<td>1</td>\r\n						<td>\r\n						<p><strong>Beautiful UI</strong></p>\r\n\r\n						<p>Android OS basic screen provides a beautiful and intuitive user interface.</p>\r\n						</td>\r\n					</tr>\r\n					<tr>\r\n						<td>2</td>\r\n						<td>\r\n						<p><strong>Connectivity</strong></p>\r\n\r\n						<p>GSM/EDGE, IDEN, CDMA, EV-DO, UMTS, Bluetooth, Wi-Fi, LTE, NFC and WiMAX.</p>\r\n						</td>\r\n					</tr>\r\n					<tr>\r\n						<td>3</td>\r\n						<td>\r\n						<p><strong>Storage</strong></p>\r\n\r\n						<p>SQLite, a lightweight relational database, is used for data storage purposes.</p>\r\n						</td>\r\n					</tr>\r\n					<tr>\r\n						<td>4</td>\r\n						<td>\r\n						<p><strong>Media support</strong></p>\r\n\r\n						<p>H.263, H.264, MPEG-4 SP, AMR, AMR-WB, AAC, HE-AAC, AAC 5.1, MP3, MIDI, Ogg Vorbis, WAV, JPEG, PNG, GIF, and BMP.</p>\r\n						</td>\r\n					</tr>\r\n					<tr>\r\n						<td>5</td>\r\n						<td>\r\n						<p><strong>Messaging</strong></p>\r\n\r\n						<p>SMS and MMS</p>\r\n						</td>\r\n					</tr>\r\n					<tr>\r\n						<td>6</td>\r\n						<td>\r\n						<p><strong>Web browser</strong></p>\r\n\r\n						<p>Based on the open-source WebKit layout engine, coupled with Chrome&#39;s V8 JavaScript engine supporting HTML5 and CSS3.</p>\r\n						</td>\r\n					</tr>\r\n					<tr>\r\n						<td>7</td>\r\n						<td>\r\n						<p><strong>Multi-touch</strong></p>\r\n\r\n						<p>Android has native support for multi-touch which was initially made available in handsets such as the HTC Hero.</p>\r\n						</td>\r\n					</tr>\r\n					<tr>\r\n						<td>8</td>\r\n						<td>\r\n						<p><strong>Multi-tasking</strong></p>\r\n\r\n						<p>User can jump from one task to another and same time various application can run simultaneously.</p>\r\n						</td>\r\n					</tr>\r\n					<tr>\r\n						<td>9</td>\r\n						<td>\r\n						<p><strong>Resizable widgets</strong></p>\r\n\r\n						<p>Widgets are resizable, so users can expand them to show more content or shrink them to save space.</p>\r\n						</td>\r\n					</tr>\r\n					<tr>\r\n						<td>10</td>\r\n						<td>\r\n						<p><strong>Multi-Language</strong></p>\r\n\r\n						<p>Supports single direction and bi-directional text.</p>\r\n						</td>\r\n					</tr>\r\n					<tr>\r\n						<td>11</td>\r\n						<td>\r\n						<p><strong>GCM</strong></p>\r\n\r\n						<p>Google Cloud Messaging (GCM) is a service that lets developers send short message data to their users on Android devices, without needing a proprietary sync solution.</p>\r\n						</td>\r\n					</tr>\r\n					<tr>\r\n						<td>12</td>\r\n						<td>\r\n						<p><strong>Wi-Fi Direct</strong></p>\r\n\r\n						<p>A technology that lets apps discover and pair directly, over a high-bandwidth peer-to-peer connection.</p>\r\n						</td>\r\n					</tr>\r\n					<tr>\r\n						<td>13</td>\r\n						<td>\r\n						<p><strong>Android Beam</strong></p>\r\n\r\n						<p>A popular NFC-based technology that lets users instantly share, just by touching two NFC-enabled phones together.</p>\r\n						</td>\r\n					</tr>\r\n				</tbody>\r\n			</table>\r\n\r\n			<h2>Android Applications</h2>\r\n\r\n			<p>Android applications are usually developed in the Java language using the Android Software Development Kit.</p>\r\n\r\n			<p>Once developed, Android applications can be packaged easily and sold out either through a store such as&nbsp;<strong>Google Play</strong>,&nbsp;<strong>SlideME</strong>,&nbsp;<strong>Opera Mobile Store</strong>,&nbsp;<strong>Mobango</strong>,&nbsp;<strong>F-droid</strong>&nbsp;and the&nbsp;<strong>Amazon Appstore</strong>.</p>\r\n\r\n			<p>Android powers hundreds of millions of mobile devices in more than 190 countries around the world. It&#39;s the largest installed base of any mobile platform and growing fast. Every day more than 1 million new Android devices are activated worldwide.</p>\r\n\r\n			<p>This tutorial has been written with an aim to teach you how to develop and package Android application. We will start from environment setup for Android application programming and then drill down to look into various aspects of Android applications.</p>\r\n\r\n			<h2>Categories of Android applications</h2>\r\n\r\n			<p>There are many android applications in the market. The top categories are &minus;</p>\r\n			<img alt=\"Categories\" src=\"https://www.tutorialspoint.com/android/images/categories.jpg\" />\r\n			<h2>History of Android</h2>\r\n\r\n			<p>The code names of android ranges from A to N currently, such as Aestro, Blender, Cupcake, Donut, Eclair, Froyo, Gingerbread, Honeycomb, Ice Cream Sandwitch, Jelly Bean, KitKat, Lollipop and Marshmallow. Let&#39;s understand the android history in a sequence.</p>\r\n			<img alt=\"Jistory\" src=\"https://www.tutorialspoint.com/android/images/jistory.jpg\" />\r\n			<h2>What is API level?</h2>\r\n\r\n			<blockquote>\r\n			<p>API Level is an integer value that uniquely identifies the framework API revision offered by a version of the Android platform.</p>\r\n			</blockquote>\r\n\r\n			<table>\r\n				<tbody>\r\n					<tr>\r\n						<th>Platform Version</th>\r\n						<th>API Level</th>\r\n						<th>VERSION_CODE</th>\r\n						<th>&nbsp;</th>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 6.0</td>\r\n						<td>23</td>\r\n						<td>MARSHMALLOW</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 5.1</td>\r\n						<td>22</td>\r\n						<td>LOLLIPOP_MR1</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 5.0</td>\r\n						<td>21</td>\r\n						<td>LOLLIPOP</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 4.4W</td>\r\n						<td>20</td>\r\n						<td>KITKAT_WATCH</td>\r\n						<td>KitKat for Wearables Only</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 4.4</td>\r\n						<td>19</td>\r\n						<td>KITKAT</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 4.3</td>\r\n						<td>18</td>\r\n						<td>JELLY_BEAN_MR2</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 4.2, 4.2.2</td>\r\n						<td>17</td>\r\n						<td>JELLY_BEAN_MR1</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 4.1, 4.1.1</td>\r\n						<td>16</td>\r\n						<td>JELLY_BEAN</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 4.0.3, 4.0.4</td>\r\n						<td>15</td>\r\n						<td>ICE_CREAM_SANDWICH_MR1</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 4.0, 4.0.1, 4.0.2</td>\r\n						<td>14</td>\r\n						<td>ICE_CREAM_SANDWICH</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 3.2</td>\r\n						<td>13</td>\r\n						<td>HONEYCOMB_MR2</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 3.1.x</td>\r\n						<td>12</td>\r\n						<td>HONEYCOMB_MR1</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 3.0.x</td>\r\n						<td>11</td>\r\n						<td>HONEYCOMB</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>\r\n						<p>Android 2.3.4</p>\r\n\r\n						<p>Android 2.3.3</p>\r\n						</td>\r\n						<td>10</td>\r\n						<td>GINGERBREAD_MR1</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>\r\n						<p>Android 2.3.2</p>\r\n\r\n						<p>Android 2.3.1</p>\r\n\r\n						<p>Android 2.3</p>\r\n						</td>\r\n						<td>9</td>\r\n						<td>GINGERBREAD</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 2.2.x</td>\r\n						<td>8</td>\r\n						<td>FROYO</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 2.1.x</td>\r\n						<td>7</td>\r\n						<td>ECLAIR_MR1</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 2.0.1</td>\r\n						<td>6</td>\r\n						<td>ECLAIR_0_1</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 2.0</td>\r\n						<td>5</td>\r\n						<td>ECLAIR</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 1.6</td>\r\n						<td>4</td>\r\n						<td>DONUT</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 1.5</td>\r\n						<td>3</td>\r\n						<td>CUPCAKE</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 1.1</td>\r\n						<td>2</td>\r\n						<td>BASE_1_1</td>\r\n						<td>&nbsp;</td>\r\n					</tr>\r\n					<tr>\r\n						<td>Android 1.0</td>\r\n						<td>1</td>\r\n						<td>BASE</td>\r\n					</tr>\r\n				</tbody>\r\n			</table>\r\n			</th>\r\n			<th>&nbsp;</th>\r\n		</tr>\r\n		<tr>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Android Applications</h2>\r\n\r\n<p>Android applications are usually developed in the Java language using the Android Software Development Kit.</p>\r\n\r\n<p>Once developed, Android applications can be packaged easily and sold out either through a store such as&nbsp;<strong>Google Play</strong>,&nbsp;<strong>SlideME</strong>,&nbsp;<strong>Opera Mobile Store</strong>,&nbsp;<strong>Mobango</strong>,&nbsp;<strong>F-droid</strong>&nbsp;and the&nbsp;<strong>Amazon Appstore</strong>.</p>\r\n\r\n<p>Android powers hundreds of millions of mobile devices in more than 190 countries around the world. It&#39;s the largest installed base of any mobile platform and growing fast. Every day more than 1 million new Android devices are activated worldwide.</p>\r\n\r\n<p>This tutorial has been written with an aim to teach you how to develop and package Android application. We will start from environment setup for Android application programming and then drill down to look into various aspects of Android applications.</p>\r\n\r\n<h2>Categories of Android applications</h2>\r\n\r\n<p>There are many android applications in the market. The top categories are &minus;</p>\r\n\r\n<p><img alt=\"Categories\" src=\"https://www.tutorialspoint.com/android/images/categories.jpg\" /></p>\r\n\r\n<h2>History of Android</h2>\r\n\r\n<p>The code names of android ranges from A to N currently, such as Aestro, Blender, Cupcake, Donut, Eclair, Froyo, Gingerbread, Honeycomb, Ice Cream Sandwitch, Jelly Bean, KitKat, Lollipop and Marshmallow. Let&#39;s understand the android history in a sequence.</p>\r\n\r\n<p><img alt=\"Jistory\" src=\"https://www.tutorialspoint.com/android/images/jistory.jpg\" /></p>\r\n\r\n<h2>What is API level?</h2>\r\n\r\n<blockquote>\r\n<p>API Level is an integer value that uniquely identifies the framework API revision offered by a version of the Android platform.</p>\r\n</blockquote>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Platform Version</th>\r\n			<th>API Level</th>\r\n			<th>VERSION_CODE</th>\r\n			<th>&nbsp;</th>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 6.0</td>\r\n			<td>23</td>\r\n			<td>MARSHMALLOW</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 5.1</td>\r\n			<td>22</td>\r\n			<td>LOLLIPOP_MR1</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 5.0</td>\r\n			<td>21</td>\r\n			<td>LOLLIPOP</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 4.4W</td>\r\n			<td>20</td>\r\n			<td>KITKAT_WATCH</td>\r\n			<td>KitKat for Wearables Only</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 4.4</td>\r\n			<td>19</td>\r\n			<td>KITKAT</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 4.3</td>\r\n			<td>18</td>\r\n			<td>JELLY_BEAN_MR2</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 4.2, 4.2.2</td>\r\n			<td>17</td>\r\n			<td>JELLY_BEAN_MR1</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 4.1, 4.1.1</td>\r\n			<td>16</td>\r\n			<td>JELLY_BEAN</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 4.0.3, 4.0.4</td>\r\n			<td>15</td>\r\n			<td>ICE_CREAM_SANDWICH_MR1</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 4.0, 4.0.1, 4.0.2</td>\r\n			<td>14</td>\r\n			<td>ICE_CREAM_SANDWICH</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 3.2</td>\r\n			<td>13</td>\r\n			<td>HONEYCOMB_MR2</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 3.1.x</td>\r\n			<td>12</td>\r\n			<td>HONEYCOMB_MR1</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 3.0.x</td>\r\n			<td>11</td>\r\n			<td>HONEYCOMB</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p>Android 2.3.4</p>\r\n\r\n			<p>Android 2.3.3</p>\r\n			</td>\r\n			<td>10</td>\r\n			<td>GINGERBREAD_MR1</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r\n			<p>Android 2.3.2</p>\r\n\r\n			<p>Android 2.3.1</p>\r\n\r\n			<p>Android 2.3</p>\r\n			</td>\r\n			<td>9</td>\r\n			<td>GINGERBREAD</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 2.2.x</td>\r\n			<td>8</td>\r\n			<td>FROYO</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 2.1.x</td>\r\n			<td>7</td>\r\n			<td>ECLAIR_MR1</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 2.0.1</td>\r\n			<td>6</td>\r\n			<td>ECLAIR_0_1</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 2.0</td>\r\n			<td>5</td>\r\n			<td>ECLAIR</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 1.6</td>\r\n			<td>4</td>\r\n			<td>DONUT</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 1.5</td>\r\n			<td>3</td>\r\n			<td>CUPCAKE</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 1.1</td>\r\n			<td>2</td>\r\n			<td>BASE_1_1</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Android 1.0</td>\r\n			<td>1</td>\r\n			<td>BASE</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>android variables are statically typed</p>\r\n','Overview'),(23,5,'<p>CSS VAriabel demo.</p>\r\n','CSS Variable'),(24,5,'<p>it is a description</p>\r\n','CSS style tag'),(33,1,'<h1 style=\"margin-left:120px\"><span style=\"font-size:24px\"><span style=\"color:#3498db\"><strong>Java - Environment Setup</strong></span></span></h1>\r\n\r\n<p>In this chapter, we will discuss on the different aspects of setting up a congenial environment for Java.</p>\r\n\r\n<h2>Local Environment Setup</h2>\r\n\r\n<p>If you are still willing to set up your environment for Java programming language, then this section guides you on how to download and set up Java on your machine. Following are the steps to set up the environment.</p>\r\n\r\n<p>Java SE is freely available from the link&nbsp;<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" rel=\"nofollow\" target=\"_blank\">Download Java</a>. You can download a version based on your operating system.</p>\r\n\r\n<p>Follow the instructions to download Java and run the&nbsp;<strong>.exe</strong>&nbsp;to install Java on your machine. Once you installed Java on your machine, you will need to set environment variables to point to correct installation directories &minus;</p>\r\n\r\n<h3>Setting Up the Path for Windows</h3>\r\n\r\n<p>Assuming you have installed Java in&nbsp;<em>c:Program Filesjavajdk</em>&nbsp;directory &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Right-click on &#39;My Computer&#39; and select &#39;Properties&#39;.</p>\r\n	</li>\r\n	<li>\r\n	<p>Click the &#39;Environment variables&#39; button under the &#39;Advanced&#39; tab.</p>\r\n	</li>\r\n	<li>\r\n	<p>Now, alter the &#39;Path&#39; variable so that it also contains the path to the Java executable. Example, if the path is currently set to &#39;C:WINDOWSSYSTEM32&#39;, then change your path to read &#39;C:WINDOWSSYSTEM32;c:Program Filesjavajdkin&#39;.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Setting Up the Path for Linux, UNIX, Solaris, FreeBSD</h3>\r\n\r\n<p>Environment variable PATH should be set to point to where the Java binaries have been installed. Refer to your shell documentation, if you have trouble doing this.</p>\r\n\r\n<p>Example, if you use&nbsp;<em>bash</em>&nbsp;as your shell, then you would add the following line to the end of your &#39;.bashrc: export PATH = /path/to/java:$PATH&#39;</p>\r\n\r\n<h2>Popular Java Editors</h2>\r\n\r\n<p>To write your Java programs, you will need a text editor. There are even more sophisticated IDEs available in the market. But for now, you can consider one of the following &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Notepad</strong>&nbsp;&minus; On Windows machine, you can use any simple text editor like Notepad (Recommended for this tutorial), TextPad.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Netbeans</strong>&nbsp;&minus; A Java IDE that is open-source and free which can be downloaded from&nbsp;<a href=\"https://www.netbeans.org/index.html\" rel=\"nofollow\" target=\"_blank\">https://www.netbeans.org/index.html</a>.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Eclipse</strong>&nbsp;&minus; A Java IDE developed by the eclipse open-source community and can be downloaded from&nbsp;<a href=\"https://www.eclipse.org/\" rel=\"nofollow\" target=\"_blank\">https://www.eclipse.org/</a>.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>Next chapter will teach you how to write and run your first Java program and some of the important basic syntaxes in Java needed for developing applications.</p>\r\n','Java - Environment Setup'),(34,1,'<h1 style=\"margin-left:80px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\">Java - Basic Syntax</span></span></h1>\r\n\r\n<p>When we consider a Java program, it can be defined as a collection of objects that communicate via invoking each other&#39;s methods. Let us now briefly look into what do class, object, methods, and instance variables mean.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Object</strong>&nbsp;&minus; Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behavior such as wagging their tail, barking, eating. An object is an instance of a class.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Class</strong>&nbsp;&minus; A class can be defined as a template/blueprint that describes the behavior/state that the object of its type supports.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Methods</strong>&nbsp;&minus; A method is basically a behavior. A class can contain many methods. It is in methods where the logics are written, data is manipulated and all the actions are executed.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Instance Variables</strong>&nbsp;&minus; Each object has its unique set of instance variables. An object&#39;s state is created by the values assigned to these instance variables.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>First Java Program</h2>\r\n\r\n<p>Let us look at a simple code that will print the words&nbsp;<strong><em>Hello World</em></strong>.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<p><a href=\"http://tpcg.io/tv5b2l\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class MyFirstJavaProgram {\r\n\r\n   /* This is my first java program.\r\n    * This will print &#39;Hello World&#39; as the output\r\n    */\r\n\r\n   public static void main(String []args) {\r\n      System.out.println(&quot;Hello World&quot;); // prints Hello World\r\n   }\r\n}</pre>\r\n\r\n<p>Let&#39;s look at how to save the file, compile, and run the program. Please follow the subsequent steps &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Open notepad and add the code as above.</p>\r\n	</li>\r\n	<li>\r\n	<p>Save the file as: MyFirstJavaProgram.java.</p>\r\n	</li>\r\n	<li>\r\n	<p>Open a command prompt window and go to the directory where you saved the class. Assume it&#39;s C:.</p>\r\n	</li>\r\n	<li>\r\n	<p>Type &#39;javac MyFirstJavaProgram.java&#39; and press enter to compile your code. If there are no errors in your code, the command prompt will take you to the next line (Assumption : The path variable is set).</p>\r\n	</li>\r\n	<li>\r\n	<p>Now, type &#39; java MyFirstJavaProgram &#39; to run your program.</p>\r\n	</li>\r\n	<li>\r\n	<p>You will be able to see &#39; Hello World &#39; printed on the window.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nC:&gt; javac MyFirstJavaProgram.java\r\nC:&gt; java MyFirstJavaProgram \r\nHello World\r\n</pre>\r\n\r\n<h2>Basic Syntax</h2>\r\n\r\n<p>About Java programs, it is very important to keep in mind the following points.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Case Sensitivity</strong>&nbsp;&minus; Java is case sensitive, which means identifier&nbsp;<strong>Hello</strong>&nbsp;and&nbsp;<strong>hello</strong>&nbsp;would have different meaning in Java.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Class Names</strong>&nbsp;&minus; For all class names the first letter should be in Upper Case. If several words are used to form a name of the class, each inner word&#39;s first letter should be in Upper Case.</p>\r\n\r\n	<p><strong>Example:</strong>&nbsp;<em>class MyFirstJavaClass</em></p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Method Names</strong>&nbsp;&minus; All method names should start with a Lower Case letter. If several words are used to form the name of the method, then each inner word&#39;s first letter should be in Upper Case.</p>\r\n\r\n	<p><strong>Example:</strong>&nbsp;<em>public void myMethodName()</em></p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Program File Name</strong>&nbsp;&minus; Name of the program file should exactly match the class name.</p>\r\n\r\n	<p>When saving the file, you should save it using the class name (Remember Java is case sensitive) and append &#39;.java&#39; to the end of the name (if the file name and the class name do not match, your program will not compile).</p>\r\n\r\n	<p>But please make a note that in case you do not have a public class present in the file then file name can be different than class name. It is also not mandatory to have a public class in the file.</p>\r\n\r\n	<p><strong>Example:</strong>&nbsp;Assume &#39;MyFirstJavaProgram&#39; is the class name. Then the file should be saved as&nbsp;<em>&#39;MyFirstJavaProgram.java&#39;</em></p>\r\n	</li>\r\n	<li>\r\n	<p><strong>public static void main(String args[])</strong>&nbsp;&minus; Java program processing starts from the main() method which is a mandatory part of every Java program.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Java Identifiers</h2>\r\n\r\n<p>All Java components require names. Names used for classes, variables, and methods are called&nbsp;<strong>identifiers</strong>.</p>\r\n\r\n<p>In Java, there are several points to remember about identifiers. They are as follows &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>All identifiers should begin with a letter (A to Z or a to z), currency character ($) or an underscore (_).</p>\r\n	</li>\r\n	<li>\r\n	<p>After the first character, identifiers can have any combination of characters.</p>\r\n	</li>\r\n	<li>\r\n	<p>A key word cannot be used as an identifier.</p>\r\n	</li>\r\n	<li>\r\n	<p>Most importantly, identifiers are case sensitive.</p>\r\n	</li>\r\n	<li>\r\n	<p>Examples of legal identifiers: age, $salary, _value, __1_value.</p>\r\n	</li>\r\n	<li>\r\n	<p>Examples of illegal identifiers: 123abc, -salary.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Java Modifiers</h2>\r\n\r\n<p>Like other languages, it is possible to modify classes, methods, etc., by using modifiers. There are two categories of modifiers &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Access Modifiers</strong>&nbsp;&minus; default, public , protected, private</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Non-access Modifiers</strong>&nbsp;&minus; final, abstract, strictfp</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>We will be looking into more details about modifiers in the next section.</p>\r\n\r\n<h2>Java Variables</h2>\r\n\r\n<p>Following are the types of variables in Java &minus;</p>\r\n\r\n<ul>\r\n	<li>Local Variables</li>\r\n	<li>Class Variables (Static Variables)</li>\r\n	<li>Instance Variables (Non-static Variables)</li>\r\n</ul>\r\n\r\n<h2>Java Arrays</h2>\r\n\r\n<p>Arrays are objects that store multiple variables of the same type. However, an array itself is an object on the heap. We will look into how to declare, construct, and initialize in the upcoming chapters.</p>\r\n\r\n<h2>Java Enums</h2>\r\n\r\n<p>Enums were introduced in Java 5.0. Enums restrict a variable to have one of only a few predefined values. The values in this enumerated list are called enums.</p>\r\n\r\n<p>With the use of enums it is possible to reduce the number of bugs in your code.</p>\r\n\r\n<p>For example, if we consider an application for a fresh juice shop, it would be possible to restrict the glass size to small, medium, and large. This would make sure that it would not allow anyone to order any size other than small, medium, or large.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<p><a href=\"http://tpcg.io/VNJ9DE\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\nclass FreshJuice {\r\n   enum FreshJuiceSize{ SMALL, MEDIUM, LARGE }\r\n   FreshJuiceSize size;\r\n}\r\n\r\npublic class FreshJuiceTest {\r\n\r\n   public static void main(String args[]) {\r\n      FreshJuice juice = new FreshJuice();\r\n      juice.size = FreshJuice.FreshJuiceSize.MEDIUM ;\r\n      System.out.println(&quot;Size: &quot; + juice.size);\r\n   }\r\n}</pre>\r\n\r\n<p>The above example will produce the following result &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nSize: MEDIUM\r\n</pre>\r\n\r\n<p><strong>Note</strong>&nbsp;&minus; Enums can be declared as their own or inside a class. Methods, variables, constructors can be defined inside enums as well.</p>\r\n\r\n<h2>Java Keywords</h2>\r\n\r\n<p>The following list shows the reserved words in Java. These reserved words may not be used as constant or variable or any other identifier names.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>abstract</td>\r\n			<td>assert</td>\r\n			<td>boolean</td>\r\n			<td>break</td>\r\n		</tr>\r\n		<tr>\r\n			<td>byte</td>\r\n			<td>case</td>\r\n			<td>catch</td>\r\n			<td>char</td>\r\n		</tr>\r\n		<tr>\r\n			<td>class</td>\r\n			<td>const</td>\r\n			<td>continue</td>\r\n			<td>default</td>\r\n		</tr>\r\n		<tr>\r\n			<td>do</td>\r\n			<td>double</td>\r\n			<td>else</td>\r\n			<td>enum</td>\r\n		</tr>\r\n		<tr>\r\n			<td>extends</td>\r\n			<td>final</td>\r\n			<td>finally</td>\r\n			<td>float</td>\r\n		</tr>\r\n		<tr>\r\n			<td>for</td>\r\n			<td>goto</td>\r\n			<td>if</td>\r\n			<td>implements</td>\r\n		</tr>\r\n		<tr>\r\n			<td>import</td>\r\n			<td>instanceof</td>\r\n			<td>int</td>\r\n			<td>interface</td>\r\n		</tr>\r\n		<tr>\r\n			<td>long</td>\r\n			<td>native</td>\r\n			<td>new</td>\r\n			<td>package</td>\r\n		</tr>\r\n		<tr>\r\n			<td>private</td>\r\n			<td>protected</td>\r\n			<td>public</td>\r\n			<td>return</td>\r\n		</tr>\r\n		<tr>\r\n			<td>short</td>\r\n			<td>static</td>\r\n			<td>strictfp</td>\r\n			<td>super</td>\r\n		</tr>\r\n		<tr>\r\n			<td>switch</td>\r\n			<td>synchronized</td>\r\n			<td>this</td>\r\n			<td>throw</td>\r\n		</tr>\r\n		<tr>\r\n			<td>throws</td>\r\n			<td>transient</td>\r\n			<td>try</td>\r\n			<td>void</td>\r\n		</tr>\r\n		<tr>\r\n			<td>volatile</td>\r\n			<td>while</td>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Comments in Java</h2>\r\n\r\n<p>Java supports single-line and multi-line comments very similar to C and C++. All characters available inside any comment are ignored by Java compiler.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<p><a href=\"http://tpcg.io/RVBY2x\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class MyFirstJavaProgram {\r\n\r\n   /* This is my first java program.\r\n    * This will print &#39;Hello World&#39; as the output\r\n    * This is an example of multi-line comments.\r\n    */\r\n\r\n   public static void main(String []args) {\r\n      // This is an example of single line comment\r\n      /* This is also an example of single line comment. */\r\n      System.out.println(&quot;Hello World&quot;);\r\n   }\r\n}</pre>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nHello World\r\n</pre>\r\n\r\n<h2>Using Blank Lines</h2>\r\n\r\n<p>A line containing only white space, possibly with a comment, is known as a blank line, and Java totally ignores it.</p>\r\n\r\n<h2>Inheritance</h2>\r\n\r\n<p>In Java, classes can be derived from classes. Basically, if you need to create a new class and here is already a class that has some of the code you require, then it is possible to derive your new class from the already existing code.</p>\r\n\r\n<p>This concept allows you to reuse the fields and methods of the existing class without having to rewrite the code in a new class. In this scenario, the existing class is called the&nbsp;<strong>superclass</strong>&nbsp;and the derived class is called the&nbsp;<strong>subclass</strong>.</p>\r\n\r\n<h2>Interfaces</h2>\r\n\r\n<p>In Java language, an interface can be defined as a contract between objects on how to communicate with each other. Interfaces play a vital role when it comes to the concept of inheritance.</p>\r\n\r\n<p>An interface defines the methods, a deriving class (subclass) should use. But the implementation of the methods is totally up to the subclass.</p>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>The next section explains about Objects and classes in Java programming. At the end of the session, you will be able to get a clear picture as to what are objects and what are classes in Java.</p>\r\n','Java - Basic Syntax'),(35,1,'<h1 style=\"margin-left:80px\"><span style=\"color:#3498db\"><strong><span style=\"font-size:24px\">Java - Object and Classes</span></strong></span></h1>\r\n\r\n<p>Java is an Object-Oriented Language. As a language that has the Object-Oriented feature, Java supports the following fundamental concepts &minus;</p>\r\n\r\n<ul>\r\n	<li>Polymorphism</li>\r\n	<li>Inheritance</li>\r\n	<li>Encapsulation</li>\r\n	<li>Abstraction</li>\r\n	<li>Classes</li>\r\n	<li>Objects</li>\r\n	<li>Instance</li>\r\n	<li>Method</li>\r\n	<li>Message Passing</li>\r\n</ul>\r\n\r\n<p>In this chapter, we will look into the concepts - Classes and Objects.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Object</strong>&nbsp;&minus; Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors &ndash; wagging the tail, barking, eating. An object is an instance of a class.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Class</strong>&nbsp;&minus; A class can be defined as a template/blueprint that describes the behavior/state that the object of its type support.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Objects in Java</h2>\r\n\r\n<p>Let us now look deep into what are objects. If we consider the real-world, we can find many objects around us, cars, dogs, humans, etc. All these objects have a state and a behavior.</p>\r\n\r\n<p>If we consider a dog, then its state is - name, breed, color, and the behavior is - barking, wagging the tail, running.</p>\r\n\r\n<p>If you compare the software object with a real-world object, they have very similar characteristics.</p>\r\n\r\n<p>Software objects also have a state and a behavior. A software object&#39;s state is stored in fields and behavior is shown via methods.</p>\r\n\r\n<p>So in software development, methods operate on the internal state of an object and the object-to-object communication is done via methods.</p>\r\n\r\n<h2>Classes in Java</h2>\r\n\r\n<p>A class is a blueprint from which individual objects are created.</p>\r\n\r\n<p>Following is a sample of a class.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<pre>\r\npublic class Dog {\r\n   String breed;\r\n   int age;\r\n   String color;\r\n\r\n   void barking() {\r\n   }\r\n\r\n   void hungry() {\r\n   }\r\n\r\n   void sleeping() {\r\n   }\r\n}</pre>\r\n\r\n<p>A class can contain any of the following variable types.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Local variables</strong>&nbsp;&minus; Variables defined inside methods, constructors or blocks are called local variables. The variable will be declared and initialized within the method and the variable will be destroyed when the method has completed.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Instance variables</strong>&nbsp;&minus; Instance variables are variables within a class but outside any method. These variables are initialized when the class is instantiated. Instance variables can be accessed from inside any method, constructor or blocks of that particular class.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Class variables</strong>&nbsp;&minus; Class variables are variables declared within a class, outside any method, with the static keyword.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>A class can have any number of methods to access the value of various kinds of methods. In the above example, barking(), hungry() and sleeping() are methods.</p>\r\n\r\n<p>Following are some of the important topics that need to be discussed when looking into classes of the Java Language.</p>\r\n\r\n<h2>Constructors</h2>\r\n\r\n<p>When discussing about classes, one of the most important sub topic would be constructors. Every class has a constructor. If we do not explicitly write a constructor for a class, the Java compiler builds a default constructor for that class.</p>\r\n\r\n<p>Each time a new object is created, at least one constructor will be invoked. The main rule of constructors is that they should have the same name as the class. A class can have more than one constructor.</p>\r\n\r\n<p>Following is an example of a constructor &minus;</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<pre>\r\npublic class Puppy {\r\n   public Puppy() {\r\n   }\r\n\r\n   public Puppy(String name) {\r\n      // This constructor has one parameter, <em>name</em>.\r\n   }\r\n}</pre>\r\n\r\n<p>Java also supports&nbsp;<a href=\"https://www.tutorialspoint.com/java/java_using_singleton.htm\">Singleton Classes</a>&nbsp;where you would be able to create only one instance of a class.</p>\r\n\r\n<p><strong>Note</strong>&nbsp;&minus; We have two different types of constructors. We are going to discuss constructors in detail in the subsequent chapters.</p>\r\n\r\n<h2>Creating an Object</h2>\r\n\r\n<p>As mentioned previously, a class provides the blueprints for objects. So basically, an object is created from a class. In Java, the new keyword is used to create new objects.</p>\r\n\r\n<p>There are three steps when creating an object from a class &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Declaration</strong>&nbsp;&minus; A variable declaration with a variable name with an object type.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Instantiation</strong>&nbsp;&minus; The &#39;new&#39; keyword is used to create the object.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Initialization</strong>&nbsp;&minus; The &#39;new&#39; keyword is followed by a call to a constructor. This call initializes the new object.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>Following is an example of creating an object &minus;</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<p><a href=\"http://tpcg.io/gQv0gO\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class Puppy {\r\n   public Puppy(String name) {\r\n      // This constructor has one parameter, <em>name</em>.\r\n      System.out.println(&quot;Passed Name is :&quot; + name );\r\n   }\r\n\r\n   public static void main(String []args) {\r\n      // Following statement would create an object myPuppy\r\n      Puppy myPuppy = new Puppy( &quot;tommy&quot; );\r\n   }\r\n}</pre>\r\n\r\n<p>If we compile and run the above program, then it will produce the following result &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nPassed Name is :tommy\r\n</pre>\r\n\r\n<h2>Accessing Instance Variables and Methods</h2>\r\n\r\n<p>Instance variables and methods are accessed via created objects. To access an instance variable, following is the fully qualified path &minus;</p>\r\n\r\n<pre>\r\n/* First create an object */\r\nObjectReference = new Constructor();\r\n\r\n/* Now call a variable as follows */\r\nObjectReference.variableName;\r\n\r\n/* Now you can call a class method as follows */\r\nObjectReference.MethodName();\r\n</pre>\r\n\r\n<h3>Example</h3>\r\n\r\n<p>This example explains how to access instance variables and methods of a class.</p>\r\n\r\n<p><a href=\"http://tpcg.io/VnuprO\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class Puppy {\r\n   int puppyAge;\r\n\r\n   public Puppy(String name) {\r\n      // This constructor has one parameter, <em>name</em>.\r\n      System.out.println(&quot;Name chosen is :&quot; + name );\r\n   }\r\n\r\n   public void setAge( int age ) {\r\n      puppyAge = age;\r\n   }\r\n\r\n   public int getAge( ) {\r\n      System.out.println(&quot;Puppy&#39;s age is :&quot; + puppyAge );\r\n      return puppyAge;\r\n   }\r\n\r\n   public static void main(String []args) {\r\n      /* Object creation */\r\n      Puppy myPuppy = new Puppy( &quot;tommy&quot; );\r\n\r\n      /* Call class method to set puppy&#39;s age */\r\n      myPuppy.setAge( 2 );\r\n\r\n      /* Call another class method to get puppy&#39;s age */\r\n      myPuppy.getAge( );\r\n\r\n      /* You can access instance variable as follows as well */\r\n      System.out.println(&quot;Variable Value :&quot; + myPuppy.puppyAge );\r\n   }\r\n}</pre>\r\n\r\n<p>If we compile and run the above program, then it will produce the following result &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nName chosen is :tommy\r\nPuppy&#39;s age is :2\r\nVariable Value :2\r\n</pre>\r\n\r\n<h2>Source File Declaration Rules</h2>\r\n\r\n<p>As the last part of this section, let&#39;s now look into the source file declaration rules. These rules are essential when declaring classes,&nbsp;<em>import</em>&nbsp;statements and&nbsp;<em>package</em>&nbsp;statements in a source file.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>There can be only one public class per source file.</p>\r\n	</li>\r\n	<li>\r\n	<p>A source file can have multiple non-public classes.</p>\r\n	</li>\r\n	<li>\r\n	<p>The public class name should be the name of the source file as well which should be appended by&nbsp;<strong>.java</strong>&nbsp;at the end. For example: the class name is&nbsp;<em>public class Employee{}</em>&nbsp;then the source file should be as Employee.java.</p>\r\n	</li>\r\n	<li>\r\n	<p>If the class is defined inside a package, then the package statement should be the first statement in the source file.</p>\r\n	</li>\r\n	<li>\r\n	<p>If import statements are present, then they must be written between the package statement and the class declaration. If there are no package statements, then the import statement should be the first line in the source file.</p>\r\n	</li>\r\n	<li>\r\n	<p>Import and package statements will imply to all the classes present in the source file. It is not possible to declare different import and/or package statements to different classes in the source file.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>Classes have several access levels and there are different types of classes; abstract classes, final classes, etc. We will be explaining about all these in the access modifiers chapter.</p>\r\n\r\n<p>Apart from the above mentioned types of classes, Java also has some special classes called Inner classes and Anonymous classes.</p>\r\n\r\n<h2>Java Package</h2>\r\n\r\n<p>In simple words, it is a way of categorizing the classes and interfaces. When developing applications in Java, hundreds of classes and interfaces will be written, therefore categorizing these classes is a must as well as makes life much easier.</p>\r\n\r\n<h2>Import Statements</h2>\r\n\r\n<p>In Java if a fully qualified name, which includes the package and the class name is given, then the compiler can easily locate the source code or classes. Import statement is a way of giving the proper location for the compiler to find that particular class.</p>\r\n\r\n<p>For example, the following line would ask the compiler to load all the classes available in directory java_installation/java/io &minus;</p>\r\n\r\n<pre>\r\nimport java.io.*;\r\n</pre>\r\n\r\n<h2>A Simple Case Study</h2>\r\n\r\n<p>For our case study, we will be creating two classes. They are Employee and EmployeeTest.</p>\r\n\r\n<p>First open notepad and add the following code. Remember this is the Employee class and the class is a public class. Now, save this source file with the name Employee.java.</p>\r\n\r\n<p>The Employee class has four instance variables - name, age, designation and salary. The class has one explicitly defined constructor, which takes a parameter.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<pre>\r\nimport java.io.*;\r\npublic class Employee {\r\n\r\n   String name;\r\n   int age;\r\n   String designation;\r\n   double salary;\r\n\r\n   // This is the constructor of the class Employee\r\n   public Employee(String name) {\r\n      this.name = name;\r\n   }\r\n\r\n   // Assign the age of the Employee  to the variable age.\r\n   public void empAge(int empAge) {\r\n      age = empAge;\r\n   }\r\n\r\n   /* Assign the designation to the variable designation.*/\r\n   public void empDesignation(String empDesig) {\r\n      designation = empDesig;\r\n   }\r\n\r\n   /* Assign the salary to the variable	salary.*/\r\n   public void empSalary(double empSalary) {\r\n      salary = empSalary;\r\n   }\r\n\r\n   /* Print the Employee details */\r\n   public void printEmployee() {\r\n      System.out.println(&quot;Name:&quot;+ name );\r\n      System.out.println(&quot;Age:&quot; + age );\r\n      System.out.println(&quot;Designation:&quot; + designation );\r\n      System.out.println(&quot;Salary:&quot; + salary);\r\n   }\r\n}</pre>\r\n\r\n<p>As mentioned previously in this tutorial, processing starts from the main method. Therefore, in order for us to run this Employee class there should be a main method and objects should be created. We will be creating a separate class for these tasks.</p>\r\n\r\n<p>Following is the&nbsp;<em>EmployeeTest</em>&nbsp;class, which creates two instances of the class Employee and invokes the methods for each object to assign values for each variable.</p>\r\n\r\n<p>Save the following code in EmployeeTest.java file.</p>\r\n\r\n<pre>\r\nimport java.io.*;\r\npublic class EmployeeTest {\r\n\r\n   public static void main(String args[]) {\r\n      /* Create two objects using constructor */\r\n      Employee empOne = new Employee(&quot;James Smith&quot;);\r\n      Employee empTwo = new Employee(&quot;Mary Anne&quot;);\r\n\r\n      // Invoking methods for each object created\r\n      empOne.empAge(26);\r\n      empOne.empDesignation(&quot;Senior Software Engineer&quot;);\r\n      empOne.empSalary(1000);\r\n      empOne.printEmployee();\r\n\r\n      empTwo.empAge(21);\r\n      empTwo.empDesignation(&quot;Software Engineer&quot;);\r\n      empTwo.empSalary(500);\r\n      empTwo.printEmployee();\r\n   }\r\n}</pre>\r\n\r\n<p>Now, compile both the classes and then run&nbsp;<em>EmployeeTest</em>&nbsp;to see the result as follows &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nC:&gt; javac Employee.java\r\nC:&gt; javac EmployeeTest.java\r\nC:&gt; java EmployeeTest\r\nName:James Smith\r\nAge:26\r\nDesignation:Senior Software Engineer\r\nSalary:1000.0\r\nName:Mary Anne\r\nAge:21\r\nDesignation:Software Engineer\r\nSalary:500.0\r\n</pre>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>In the next session, we will discuss the basic data types in Java and how they can be used when developing Java applications.</p>\r\n','Java - Object and Classes'),(36,1,'<p style=\"margin-left:120px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\"><strong>Java - Constructors</strong></span></span></p>\r\n\r\n<p>A constructor initializes an object when it is created. It has the same name as its class and is syntactically similar to a method. However, constructors have no explicit return type.</p>\r\n\r\n<p>Typically, you will use a constructor to give initial values to the instance variables defined by the class, or to perform any other start-up procedures required to create a fully formed object.</p>\r\n\r\n<p>All classes have constructors, whether you define one or not, because Java automatically provides a default constructor that initializes all member variables to zero. However, once you define your own constructor, the default constructor is no longer used.</p>\r\n\r\n<h2>Syntax</h2>\r\n\r\n<p>Following is the syntax of a constructor &minus;</p>\r\n\r\n<pre>\r\nclass ClassName {\r\n   ClassName() {\r\n   }\r\n}</pre>\r\n\r\n<p>Java allows two types of constructors namely &minus;</p>\r\n\r\n<ul>\r\n	<li>No argument Constructors</li>\r\n	<li>Parameterized Constructors</li>\r\n</ul>\r\n\r\n<h2>No argument Constructors</h2>\r\n\r\n<p>As the name specifies the no argument constructors of Java does not accept any parameters instead, using these constructors the instance variables of a method will be initialized with fixed values for all objects.</p>\r\n\r\n<h2>Example</h2>\r\n\r\n<pre>\r\nPublic class MyClass {\r\n   Int num;\r\n   MyClass() {\r\n      num = 100;\r\n   }\r\n}</pre>\r\n\r\n<p>You would call constructor to initialize objects as follows</p>\r\n\r\n<pre>\r\npublic class ConsDemo {\r\n   public static void main(String args[]) {\r\n      MyClass t1 = new MyClass();\r\n      MyClass t2 = new MyClass();\r\n      System.out.println(t1.num + &quot; &quot; + t2.num);\r\n   }\r\n}</pre>\r\n\r\n<p>This would produce the following result</p>\r\n\r\n<pre>\r\n100 100\r\n</pre>\r\n\r\n<h2>Parameterized Constructors</h2>\r\n\r\n<p>Most often, you will need a constructor that accepts one or more parameters. Parameters are added to a constructor in the same way that they are added to a method, just declare them inside the parentheses after the constructor&#39;s name.</p>\r\n\r\n<h2>Example</h2>\r\n\r\n<p>Here is a simple example that uses a constructor &minus;</p>\r\n\r\n<pre>\r\n// A simple constructor.\r\nclass MyClass {\r\n   int x;\r\n   \r\n   // Following is the constructor\r\n   MyClass(int i ) {\r\n      x = i;\r\n   }\r\n}</pre>\r\n\r\n<p>You would call constructor to initialize objects as follows &minus;</p>\r\n\r\n<pre>\r\npublic class ConsDemo {\r\n   public static void main(String args[]) {\r\n      MyClass t1 = new MyClass( 10 );\r\n      MyClass t2 = new MyClass( 20 );\r\n      System.out.println(t1.x + &quot; &quot; + t2.x);\r\n   }\r\n}</pre>\r\n\r\n<p>This would produce the following result &minus;</p>\r\n','Java - Constructors'),(37,1,'<p style=\"margin-left:120px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\"><strong>Java - Basic Datatypes</strong></span></span></p>\r\n\r\n<p>Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals, or characters in these variables.</p>\r\n\r\n<p>There are two data types available in Java &minus;</p>\r\n\r\n<ul>\r\n	<li>Primitive Data Types</li>\r\n	<li>Reference/Object Data Types</li>\r\n</ul>\r\n\r\n<h2>Primitive Data Types</h2>\r\n\r\n<p>There are eight primitive datatypes supported by Java. Primitive datatypes are predefined by the language and named by a keyword. Let us now look into the eight primitive data types in detail.</p>\r\n\r\n<h3>byte</h3>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Byte data type is an 8-bit signed two&#39;s complement integer</p>\r\n	</li>\r\n	<li>\r\n	<p>Minimum value is -128 (-2^7)</p>\r\n	</li>\r\n	<li>\r\n	<p>Maximum value is 127 (inclusive)(2^7 -1)</p>\r\n	</li>\r\n	<li>\r\n	<p>Default value is 0</p>\r\n	</li>\r\n	<li>\r\n	<p>Byte data type is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an integer.</p>\r\n	</li>\r\n	<li>\r\n	<p>Example: byte a = 100, byte b = -50</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>short</h3>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Short data type is a 16-bit signed two&#39;s complement integer</p>\r\n	</li>\r\n	<li>\r\n	<p>Minimum value is -32,768 (-2^15)</p>\r\n	</li>\r\n	<li>\r\n	<p>Maximum value is 32,767 (inclusive) (2^15 -1)</p>\r\n	</li>\r\n	<li>\r\n	<p>Short data type can also be used to save memory as byte data type. A short is 2 times smaller than an integer</p>\r\n	</li>\r\n	<li>\r\n	<p>Default value is 0.</p>\r\n	</li>\r\n	<li>\r\n	<p>Example: short s = 10000, short r = -20000</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>int</h3>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Int data type is a 32-bit signed two&#39;s complement integer.</p>\r\n	</li>\r\n	<li>\r\n	<p>Minimum value is - 2,147,483,648 (-2^31)</p>\r\n	</li>\r\n	<li>\r\n	<p>Maximum value is 2,147,483,647(inclusive) (2^31 -1)</p>\r\n	</li>\r\n	<li>\r\n	<p>Integer is generally used as the default data type for integral values unless there is a concern about memory.</p>\r\n	</li>\r\n	<li>\r\n	<p>The default value is 0</p>\r\n	</li>\r\n	<li>\r\n	<p>Example: int a = 100000, int b = -200000</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>long</h3>\r\n\r\n<ul>\r\n	<li>Long data type is a 64-bit signed two&#39;s complement integer</li>\r\n	<li>Minimum value is -9,223,372,036,854,775,808(-2^63)</li>\r\n	<li>Maximum value is 9,223,372,036,854,775,807 (inclusive)(2^63 -1)</li>\r\n	<li>This type is used when a wider range than int is needed</li>\r\n	<li>Default value is 0L</li>\r\n	<li>Example: long a = 100000L, long b = -200000L</li>\r\n</ul>\r\n\r\n<h3>float</h3>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Float data type is a single-precision 32-bit IEEE 754 floating point</p>\r\n	</li>\r\n	<li>\r\n	<p>Float is mainly used to save memory in large arrays of floating point numbers</p>\r\n	</li>\r\n	<li>\r\n	<p>Default value is 0.0f</p>\r\n	</li>\r\n	<li>\r\n	<p>Float data type is never used for precise values such as currency</p>\r\n	</li>\r\n	<li>\r\n	<p>Example: float f1 = 234.5f</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>double</h3>\r\n\r\n<ul>\r\n	<li>\r\n	<p>double data type is a double-precision 64-bit IEEE 754 floating point</p>\r\n	</li>\r\n	<li>\r\n	<p>This data type is generally used as the default data type for decimal values, generally the default choice</p>\r\n	</li>\r\n	<li>\r\n	<p>Double data type should never be used for precise values such as currency</p>\r\n	</li>\r\n	<li>\r\n	<p>Default value is 0.0d</p>\r\n	</li>\r\n	<li>\r\n	<p>Example: double d1 = 123.4</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>boolean</h3>\r\n\r\n<ul>\r\n	<li>boolean data type represents one bit of information</li>\r\n	<li>There are only two possible values: true and false</li>\r\n	<li>This data type is used for simple flags that track true/false conditions</li>\r\n	<li>Default value is false</li>\r\n	<li>Example: boolean one = true</li>\r\n</ul>\r\n\r\n<h3>char</h3>\r\n\r\n<ul>\r\n	<li>char data type is a single 16-bit Unicode character</li>\r\n	<li>Minimum value is &#39;u0000&#39; (or 0)</li>\r\n	<li>Maximum value is &#39;uffff&#39; (or 65,535 inclusive)</li>\r\n	<li>Char data type is used to store any character</li>\r\n	<li>Example: char letterA = &#39;A&#39;</li>\r\n</ul>\r\n\r\n<h2>Reference Datatypes</h2>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Reference variables are created using defined constructors of the classes. They are used to access objects. These variables are declared to be of a specific type that cannot be changed. For example, Employee, Puppy, etc.</p>\r\n	</li>\r\n	<li>\r\n	<p>Class objects and various type of array variables come under reference datatype.</p>\r\n	</li>\r\n	<li>\r\n	<p>Default value of any reference variable is null.</p>\r\n	</li>\r\n	<li>\r\n	<p>A reference variable can be used to refer any object of the declared type or any compatible type.</p>\r\n	</li>\r\n	<li>\r\n	<p>Example: Animal animal = new Animal(&quot;giraffe&quot;);</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Java Literals</h2>\r\n\r\n<p>A literal is a source code representation of a fixed value. They are represented directly in the code without any computation.</p>\r\n\r\n<p>Literals can be assigned to any primitive type variable. For example &minus;</p>\r\n\r\n<pre>\r\nbyte a = 68;\r\nchar a = &#39;A&#39;;</pre>\r\n\r\n<p>byte, int, long, and short can be expressed in decimal(base 10), hexadecimal(base 16) or octal(base 8) number systems as well.</p>\r\n\r\n<p>Prefix 0 is used to indicate octal, and prefix 0x indicates hexadecimal when using these number systems for literals. For example &minus;</p>\r\n\r\n<pre>\r\nint decimal = 100;\r\nint octal = 0144;\r\nint hexa =  0x64;</pre>\r\n\r\n<p>String literals in Java are specified like they are in most other languages by enclosing a sequence of characters between a pair of double quotes. Examples of string literals are &minus;</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<pre>\r\n&quot;Hello World&quot;\r\n&quot;two\nlines&quot;\r\n&quot;&quot;This is in quotes&quot;&quot;</pre>\r\n\r\n<p>String and char types of literals can contain any Unicode characters. For example &minus;</p>\r\n\r\n<pre>\r\nchar a = &#39;u0001&#39;;\r\nString a = &quot;u0001&quot;;</pre>\r\n\r\n<p>Java language supports few special escape sequences for String and char literals as well. They are &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Notation</th>\r\n			<th>Character represented</th>\r\n		</tr>\r\n		<tr>\r\n			<td>\n</td>\r\n			<td>Newline (0x0a)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\r</td>\r\n			<td>Carriage return (0x0d)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>f</td>\r\n			<td>Formfeed (0x0c)</td>\r\n		</tr>\r\n		<tr>\r\n			<td></td>\r\n			<td>Backspace (0x08)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>s</td>\r\n			<td>Space (0x20)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>	</td>\r\n			<td>tab</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&quot;</td>\r\n			<td>Double quote</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&#39;</td>\r\n			<td>Single quote</td>\r\n		</tr>\r\n		<tr>\r\n			<td>\\</td>\r\n			<td>backslash</td>\r\n		</tr>\r\n		<tr>\r\n			<td>ddd</td>\r\n			<td>Octal character (ddd)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>uxxxx</td>\r\n			<td>Hexadecimal UNICODE character (xxxx)</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>This chapter explained the various data types. The next topic explains different variable types and their usage. This will give you a good understanding on how they can be used in the Java classes, interfaces, etc.</p>\r\n','Java - Basic Datatypes'),(38,1,'<h1 style=\"margin-left:120px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\"><strong>Java - Variable Types</strong></span></span></h1>\r\n\r\n<p>A variable provides us with named storage that our programs can manipulate. Each variable in Java has a specific type, which determines the size and layout of the variable&#39;s memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable.</p>\r\n\r\n<p>You must declare all variables before they can be used. Following is the basic form of a variable declaration &minus;</p>\r\n\r\n<pre>\r\ndata type variable [ = value][, variable [ = value] ...] ;\r\n</pre>\r\n\r\n<p>Here&nbsp;<em>data type</em>&nbsp;is one of Java&#39;s datatypes and&nbsp;<em>variable</em>&nbsp;is the name of the variable. To declare more than one variable of the specified type, you can use a comma-separated list.</p>\r\n\r\n<p>Following are valid examples of variable declaration and initialization in Java &minus;</p>\r\n\r\n<h2>Example</h2>\r\n\r\n<pre>\r\nint a, b, c;         // Declares three ints, a, b, and c.\r\nint a = 10, b = 10;  // Example of initialization\r\nbyte B = 22;         // initializes a byte type variable B.\r\ndouble pi = 3.14159; // declares and assigns a value of PI.\r\nchar a = &#39;a&#39;;        // the char variable a iis initialized with value &#39;a&#39;</pre>\r\n\r\n<p>This chapter will explain various variable types available in Java Language. There are three kinds of variables in Java &minus;</p>\r\n\r\n<ul>\r\n	<li>Local variables</li>\r\n	<li>Instance variables</li>\r\n	<li>Class/Static variables</li>\r\n</ul>\r\n\r\n<h2>Local Variables</h2>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Local variables are declared in methods, constructors, or blocks.</p>\r\n	</li>\r\n	<li>\r\n	<p>Local variables are created when the method, constructor or block is entered and the variable will be destroyed once it exits the method, constructor, or block.</p>\r\n	</li>\r\n	<li>\r\n	<p>Access modifiers cannot be used for local variables.</p>\r\n	</li>\r\n	<li>\r\n	<p>Local variables are visible only within the declared method, constructor, or block.</p>\r\n	</li>\r\n	<li>\r\n	<p>Local variables are implemented at stack level internally.</p>\r\n	</li>\r\n	<li>\r\n	<p>There is no default value for local variables, so local variables should be declared and an initial value should be assigned before the first use.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Example</h3>\r\n\r\n<p>Here,&nbsp;<em>age</em>&nbsp;is a local variable. This is defined inside&nbsp;<em>pupAge()</em>&nbsp;method and its scope is limited to only this method.</p>\r\n\r\n<p><a href=\"http://tpcg.io/07heJ9\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class Test {\r\n   public void pupAge() {\r\n      int age = 0;\r\n      age = age + 7;\r\n      System.out.println(&quot;Puppy age is : &quot; + age);\r\n   }\r\n\r\n   public static void main(String args[]) {\r\n      Test test = new Test();\r\n      test.pupAge();\r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nPuppy age is: 7\r\n</pre>\r\n\r\n<h3>Example</h3>\r\n\r\n<p>Following example uses&nbsp;<em>age</em>&nbsp;without initializing it, so it would give an error at the time of compilation.</p>\r\n\r\n<p><a href=\"http://tpcg.io/kv9gf6\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class Test {\r\n   public void pupAge() {\r\n      int age;\r\n      age = age + 7;\r\n      System.out.println(&quot;Puppy age is : &quot; + age);\r\n   }\r\n\r\n   public static void main(String args[]) {\r\n      Test test = new Test();\r\n      test.pupAge();\r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following error while compiling it &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nTest.java:4:variable number might not have been initialized\r\nage = age + 7;\r\n         ^\r\n1 error\r\n</pre>\r\n\r\n<h2>Instance Variables</h2>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Instance variables are declared in a class, but outside a method, constructor or any block.</p>\r\n	</li>\r\n	<li>\r\n	<p>When a space is allocated for an object in the heap, a slot for each instance variable value is created.</p>\r\n	</li>\r\n	<li>\r\n	<p>Instance variables are created when an object is created with the use of the keyword &#39;new&#39; and destroyed when the object is destroyed.</p>\r\n	</li>\r\n	<li>\r\n	<p>Instance variables hold values that must be referenced by more than one method, constructor or block, or essential parts of an object&#39;s state that must be present throughout the class.</p>\r\n	</li>\r\n	<li>\r\n	<p>Instance variables can be declared in class level before or after use.</p>\r\n	</li>\r\n	<li>\r\n	<p>Access modifiers can be given for instance variables.</p>\r\n	</li>\r\n	<li>\r\n	<p>The instance variables are visible for all methods, constructors and block in the class. Normally, it is recommended to make these variables private (access level). However, visibility for subclasses can be given for these variables with the use of access modifiers.</p>\r\n	</li>\r\n	<li>\r\n	<p>Instance variables have default values. For numbers, the default value is 0, for Booleans it is false, and for object references it is null. Values can be assigned during the declaration or within the constructor.</p>\r\n	</li>\r\n	<li>\r\n	<p>Instance variables can be accessed directly by calling the variable name inside the class. However, within static methods (when instance variables are given accessibility), they should be called using the fully qualified name.&nbsp;<em>ObjectReference.VariableName</em>.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Example</h3>\r\n\r\n<p><a href=\"http://tpcg.io/mULkxL\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\nimport java.io.*;\r\npublic class Employee {\r\n\r\n   // this instance variable is visible for any child class.\r\n   public String name;\r\n\r\n   // salary  variable is visible in Employee class only.\r\n   private double salary;\r\n\r\n   // The name variable is assigned in the constructor.\r\n   public Employee (String empName) {\r\n      name = empName;\r\n   }\r\n\r\n   // The salary variable is assigned a value.\r\n   public void setSalary(double empSal) {\r\n      salary = empSal;\r\n   }\r\n\r\n   // This method prints the employee details.\r\n   public void printEmp() {\r\n      System.out.println(&quot;name  : &quot; + name );\r\n      System.out.println(&quot;salary :&quot; + salary);\r\n   }\r\n\r\n   public static void main(String args[]) {\r\n      Employee empOne = new Employee(&quot;Ransika&quot;);\r\n      empOne.setSalary(1000);\r\n      empOne.printEmp();\r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nname  : Ransika\r\nsalary :1000.0\r\n</pre>\r\n\r\n<h2>Class/Static Variables</h2>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Class variables also known as static variables are declared with the static keyword in a class, but outside a method, constructor or a block.</p>\r\n	</li>\r\n	<li>\r\n	<p>There would only be one copy of each class variable per class, regardless of how many objects are created from it.</p>\r\n	</li>\r\n	<li>\r\n	<p>Static variables are rarely used other than being declared as constants. Constants are variables that are declared as public/private, final, and static. Constant variables never change from their initial value.</p>\r\n	</li>\r\n	<li>\r\n	<p>Static variables are stored in the static memory. It is rare to use static variables other than declared final and used as either public or private constants.</p>\r\n	</li>\r\n	<li>\r\n	<p>Static variables are created when the program starts and destroyed when the program stops.</p>\r\n	</li>\r\n	<li>\r\n	<p>Visibility is similar to instance variables. However, most static variables are declared public since they must be available for users of the class.</p>\r\n	</li>\r\n	<li>\r\n	<p>Default values are same as instance variables. For numbers, the default value is 0; for Booleans, it is false; and for object references, it is null. Values can be assigned during the declaration or within the constructor. Additionally, values can be assigned in special static initializer blocks.</p>\r\n	</li>\r\n	<li>\r\n	<p>Static variables can be accessed by calling with the class name&nbsp;<em>ClassName.VariableName</em>.</p>\r\n	</li>\r\n	<li>\r\n	<p>When declaring class variables as public static final, then variable names (constants) are all in upper case. If the static variables are not public and final, the naming syntax is the same as instance and local variables.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Example</h3>\r\n\r\n<p><a href=\"http://tpcg.io/NHe4EU\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\nimport java.io.*;\r\npublic class Employee {\r\n\r\n   // salary  variable is a private static variable\r\n   private static double salary;\r\n\r\n   // DEPARTMENT is a constant\r\n   public static final String DEPARTMENT = &quot;Development &quot;;\r\n\r\n   public static void main(String args[]) {\r\n      salary = 1000;\r\n      System.out.println(DEPARTMENT + &quot;average salary:&quot; + salary);\r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\nDevelopment average salary:1000\r\n</pre>\r\n\r\n<p><strong>Note</strong>&nbsp;&minus; If the variables are accessed from an outside class, the constant should be accessed as Employee.DEPARTMENT</p>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>You already have used access modifiers (public &amp; private) in this chapter. The next chapter will explain Access Modifiers and Non-Access Modifiers in detail.</p>\r\n','Java - Variable Types'),(39,1,'<h1 style=\"margin-left:120px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\"><strong>Java - Modifier Types</strong></span></span></h1>\r\n\r\n<p>Modifiers are keywords that you add to those definitions to change their meanings. Java language has a wide variety of modifiers, including the following &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><a href=\"https://www.tutorialspoint.com/java/java_access_modifiers.htm\">Java Access Modifiers</a></p>\r\n	</li>\r\n	<li>\r\n	<p><a href=\"https://www.tutorialspoint.com/java/java_nonaccess_modifiers.htm\">Non Access Modifiers</a></p>\r\n	</li>\r\n</ul>\r\n\r\n<p>To use a modifier, you include its keyword in the definition of a class, method, or variable. The modifier precedes the rest of the statement, as in the following example.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<pre>\r\n<em>public</em> class className {\r\n   // ...\r\n}\r\n\r\n<em>private</em> boolean myFlag;\r\n<em>static final</em> double weeks = 9.5;\r\n<em>protected static final</em> int BOXWIDTH = 42;\r\n\r\n<em>public static</em> void main(String[] arguments) {\r\n   // body of method\r\n}</pre>\r\n\r\n<h2>Access Control Modifiers</h2>\r\n\r\n<p>Java provides a number of access modifiers to set access levels for classes, variables, methods and constructors. The four access levels are &minus;</p>\r\n\r\n<ul>\r\n	<li>Visible to the package, the default. No modifiers are needed.</li>\r\n	<li>Visible to the class only (private).</li>\r\n	<li>Visible to the world (public).</li>\r\n	<li>Visible to the package and all subclasses (protected).</li>\r\n</ul>\r\n\r\n<h2>Non-Access Modifiers</h2>\r\n\r\n<p>Java provides a number of non-access modifiers to achieve many other functionality.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>The&nbsp;<em>static</em>&nbsp;modifier for creating class methods and variables.</p>\r\n	</li>\r\n	<li>\r\n	<p>The&nbsp;<em>final</em>&nbsp;modifier for finalizing the implementations of classes, methods, and variables.</p>\r\n	</li>\r\n	<li>\r\n	<p>The&nbsp;<em>abstract</em>&nbsp;modifier for creating abstract classes and methods.</p>\r\n	</li>\r\n	<li>\r\n	<p>The&nbsp;<em>synchronized</em>&nbsp;and&nbsp;<em>volatile</em>&nbsp;modifiers, which are used for threads.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>In the next section, we will be discussing about Basic Operators used in Java Language. The chapter will give you an overview of how these operators can be used during application development.</p>\r\n','Java - Modifier Types'),(40,1,'<h1 style=\"margin-left:120px\"><span style=\"font-size:24px\"><span style=\"color:#3498db\"><strong>Java - Basic Operators</strong></span></span></h1>\r\n\r\n<p>Java provides a rich set of operators to manipulate variables. We can divide all the Java operators into the following groups &minus;</p>\r\n\r\n<ul>\r\n	<li>Arithmetic Operators</li>\r\n	<li>Relational Operators</li>\r\n	<li>Bitwise Operators</li>\r\n	<li>Logical Operators</li>\r\n	<li>Assignment Operators</li>\r\n	<li>Misc Operators</li>\r\n</ul>\r\n\r\n<h2>The Arithmetic Operators</h2>\r\n\r\n<p>Arithmetic operators are used in mathematical expressions in the same way that they are used in algebra. The following table lists the arithmetic operators &minus;</p>\r\n\r\n<p>Assume integer variable A holds 10 and variable B holds 20, then &minus;</p>\r\n\r\n<p><a href=\"https://www.tutorialspoint.com/java/java_arithmatic_operators_examples.htm\">Show Examples</a></p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>+ (Addition)</td>\r\n			<td>Adds values on either side of the operator.</td>\r\n			<td>A + B will give 30</td>\r\n		</tr>\r\n		<tr>\r\n			<td>- (Subtraction)</td>\r\n			<td>Subtracts right-hand operand from left-hand operand.</td>\r\n			<td>A - B will give -10</td>\r\n		</tr>\r\n		<tr>\r\n			<td>* (Multiplication)</td>\r\n			<td>Multiplies values on either side of the operator.</td>\r\n			<td>A * B will give 200</td>\r\n		</tr>\r\n		<tr>\r\n			<td>/ (Division)</td>\r\n			<td>Divides left-hand operand by right-hand operand.</td>\r\n			<td>B / A will give 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>% (Modulus)</td>\r\n			<td>Divides left-hand operand by right-hand operand and returns remainder.</td>\r\n			<td>B % A will give 0</td>\r\n		</tr>\r\n		<tr>\r\n			<td>++ (Increment)</td>\r\n			<td>Increases the value of operand by 1.</td>\r\n			<td>B++ gives 21</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-- (Decrement)</td>\r\n			<td>Decreases the value of operand by 1.</td>\r\n			<td>B-- gives 19</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>The Relational Operators</h2>\r\n\r\n<p>There are following relational operators supported by Java language.</p>\r\n\r\n<p>Assume variable A holds 10 and variable B holds 20, then &minus;</p>\r\n\r\n<p><a href=\"https://www.tutorialspoint.com/java/java_relational_operators_examples.htm\">Show Examples</a></p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>== (equal to)</td>\r\n			<td>Checks if the values of two operands are equal or not, if yes then condition becomes true.</td>\r\n			<td>(A == B) is not true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>!= (not equal to)</td>\r\n			<td>Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.</td>\r\n			<td>(A != B) is true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt; (greater than)</td>\r\n			<td>Checks if the value of left operand is greater than the value of right operand, if yes then condition becomes true.</td>\r\n			<td>(A &gt; B) is not true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt; (less than)</td>\r\n			<td>Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true.</td>\r\n			<td>(A &lt; B) is true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;= (greater than or equal to)</td>\r\n			<td>Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.</td>\r\n			<td>(A &gt;= B) is not true.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;= (less than or equal to)</td>\r\n			<td>Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true.</td>\r\n			<td>(A &lt;= B) is true.</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>The Bitwise Operators</h2>\r\n\r\n<p>Java defines several bitwise operators, which can be applied to the integer types, long, int, short, char, and byte.</p>\r\n\r\n<p>Bitwise operator works on bits and performs bit-by-bit operation. Assume if a = 60 and b = 13; now in binary format they will be as follows &minus;</p>\r\n\r\n<p>a = 0011 1100</p>\r\n\r\n<p>b = 0000 1101</p>\r\n\r\n<p>-----------------</p>\r\n\r\n<p>a&amp;b = 0000 1100</p>\r\n\r\n<p>a|b = 0011 1101</p>\r\n\r\n<p>a^b = 0011 0001</p>\r\n\r\n<p>~a&nbsp; = 1100 0011</p>\r\n\r\n<p>The following table lists the bitwise operators &minus;</p>\r\n\r\n<p>Assume integer variable A holds 60 and variable B holds 13 then &minus;</p>\r\n\r\n<p><a href=\"https://www.tutorialspoint.com/java/java_bitwise_operators_examples.htm\">Show Examples</a></p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp; (bitwise and)</td>\r\n			<td>Binary AND Operator copies a bit to the result if it exists in both operands.</td>\r\n			<td>(A &amp; B) will give 12 which is 0000 1100</td>\r\n		</tr>\r\n		<tr>\r\n			<td>| (bitwise or)</td>\r\n			<td>Binary OR Operator copies a bit if it exists in either operand.</td>\r\n			<td>(A | B) will give 61 which is 0011 1101</td>\r\n		</tr>\r\n		<tr>\r\n			<td>^ (bitwise XOR)</td>\r\n			<td>Binary XOR Operator copies the bit if it is set in one operand but not both.</td>\r\n			<td>(A ^ B) will give 49 which is 0011 0001</td>\r\n		</tr>\r\n		<tr>\r\n			<td>~ (bitwise compliment)</td>\r\n			<td>Binary Ones Complement Operator is unary and has the effect of &#39;flipping&#39; bits.</td>\r\n			<td>(~A ) will give -61 which is 1100 0011 in 2&#39;s complement form due to a signed binary number.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;&lt; (left shift)</td>\r\n			<td>Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.</td>\r\n			<td>A &lt;&lt; 2 will give 240 which is 1111 0000</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;&gt; (right shift)</td>\r\n			<td>Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.</td>\r\n			<td>A &gt;&gt; 2 will give 15 which is 1111</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;&gt;&gt; (zero fill right shift)</td>\r\n			<td>Shift right zero fill operator. The left operands value is moved right by the number of bits specified by the right operand and shifted values are filled up with zeros.</td>\r\n			<td>A &gt;&gt;&gt;2 will give 15 which is 0000 1111</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>The Logical Operators</h2>\r\n\r\n<p>The following table lists the logical operators &minus;</p>\r\n\r\n<p>Assume Boolean variables A holds true and variable B holds false, then &minus;</p>\r\n\r\n<p><a href=\"https://www.tutorialspoint.com/java/java_logical_operators_examples.htm\">Show Examples</a></p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp;&amp; (logical and)</td>\r\n			<td>Called Logical AND operator. If both the operands are non-zero, then the condition becomes true.</td>\r\n			<td>(A &amp;&amp; B) is false</td>\r\n		</tr>\r\n		<tr>\r\n			<td>|| (logical or)</td>\r\n			<td>Called Logical OR Operator. If any of the two operands are non-zero, then the condition becomes true.</td>\r\n			<td>(A || B) is true</td>\r\n		</tr>\r\n		<tr>\r\n			<td>! (logical not)</td>\r\n			<td>Called Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true then Logical NOT operator will make false.</td>\r\n			<td>!(A &amp;&amp; B) is true</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>The Assignment Operators</h2>\r\n\r\n<p>Following are the assignment operators supported by Java language &minus;</p>\r\n\r\n<p><a href=\"https://www.tutorialspoint.com/java/java_assignment_operators_examples.htm\">Show Examples</a></p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Operator</th>\r\n			<th>Description</th>\r\n			<th>Example</th>\r\n		</tr>\r\n		<tr>\r\n			<td>=</td>\r\n			<td>Simple assignment operator. Assigns values from right side operands to left side operand.</td>\r\n			<td>C = A + B will assign value of A + B into C</td>\r\n		</tr>\r\n		<tr>\r\n			<td>+=</td>\r\n			<td>Add AND assignment operator. It adds right operand to the left operand and assign the result to left operand.</td>\r\n			<td>C += A is equivalent to C = C + A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>-=</td>\r\n			<td>Subtract AND assignment operator. It subtracts right operand from the left operand and assign the result to left operand.</td>\r\n			<td>C -= A is equivalent to C = C &ndash; A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>*=</td>\r\n			<td>Multiply AND assignment operator. It multiplies right operand with the left operand and assign the result to left operand.</td>\r\n			<td>C *= A is equivalent to C = C * A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>/=</td>\r\n			<td>Divide AND assignment operator. It divides left operand with the right operand and assign the result to left operand.</td>\r\n			<td>C /= A is equivalent to C = C / A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>%=</td>\r\n			<td>Modulus AND assignment operator. It takes modulus using two operands and assign the result to left operand.</td>\r\n			<td>C %= A is equivalent to C = C % A</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;&lt;=</td>\r\n			<td>Left shift AND assignment operator.</td>\r\n			<td>C &lt;&lt;= 2 is same as C = C &lt;&lt; 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;&gt;=</td>\r\n			<td>Right shift AND assignment operator.</td>\r\n			<td>C &gt;&gt;= 2 is same as C = C &gt;&gt; 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp;=</td>\r\n			<td>Bitwise AND assignment operator.</td>\r\n			<td>C &amp;= 2 is same as C = C &amp; 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>^=</td>\r\n			<td>bitwise exclusive OR and assignment operator.</td>\r\n			<td>C ^= 2 is same as C = C ^ 2</td>\r\n		</tr>\r\n		<tr>\r\n			<td>|=</td>\r\n			<td>bitwise inclusive OR and assignment operator.</td>\r\n			<td>C |= 2 is same as C = C | 2</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Miscellaneous Operators</h2>\r\n\r\n<p>There are few other operators supported by Java Language.</p>\r\n\r\n<h3>Conditional Operator ( ? : )</h3>\r\n\r\n<p>Conditional operator is also known as the&nbsp;<strong>ternary operator</strong>. This operator consists of three operands and is used to evaluate Boolean expressions. The goal of the operator is to decide, which value should be assigned to the variable. The operator is written as &minus;</p>\r\n\r\n<pre>\r\nvariable x = (expression) ? value if true : value if false\r\n</pre>\r\n\r\n<p>Following is an example &minus;</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<p><a href=\"http://tpcg.io/xJJ2kP\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class Test {\r\n\r\n   public static void main(String args[]) {\r\n      int a, b;\r\n      a = 10;\r\n      b = (a == 1) ? 20: 30;\r\n      System.out.println( &quot;Value of b is : &quot; +  b );\r\n\r\n      b = (a == 10) ? 20: 30;\r\n      System.out.println( &quot;Value of b is : &quot; + b );\r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\nValue of b is : 30\r\nValue of b is : 20\r\n</pre>\r\n\r\n<h3>instanceof Operator</h3>\r\n\r\n<p>This operator is used only for object reference variables. The operator checks whether the object is of a particular type (class type or interface type). instanceof operator is written as &minus;</p>\r\n\r\n<pre>\r\n( Object reference variable ) instanceof  (class/interface type)\r\n</pre>\r\n\r\n<p>If the object referred by the variable on the left side of the operator passes the IS-A check for the class/interface type on the right side, then the result will be true. Following is an example &minus;</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<p><a href=\"http://tpcg.io/P7OE1d\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class Test {\r\n\r\n   public static void main(String args[]) {\r\n\r\n      String name = &quot;James&quot;;\r\n\r\n      // following will return true since name is type of String\r\n      boolean result = name instanceof String;\r\n      System.out.println( result );\r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\ntrue\r\n</pre>\r\n\r\n<p>This operator will still return true, if the object being compared is the assignment compatible with the type on the right. Following is one more example &minus;</p>\r\n\r\n<p><strong>Example</strong></p>\r\n\r\n<p><a href=\"http://tpcg.io/TWlS7d\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\nclass Vehicle {}\r\n\r\npublic class Car extends Vehicle {\r\n\r\n   public static void main(String args[]) {\r\n\r\n      Vehicle a = new Car();\r\n      boolean result =  a instanceof Car;\r\n      System.out.println( result );\r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<p><strong>Output</strong></p>\r\n\r\n<pre>\r\ntrue\r\n</pre>\r\n\r\n<h2>Precedence of Java Operators</h2>\r\n\r\n<p>Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator &minus;</p>\r\n\r\n<p>For example, x = 7 + 3 * 2; here x is assigned 13, not 20 because operator * has higher precedence than +, so it first gets multiplied with 3 * 2 and then adds into 7.</p>\r\n\r\n<p>Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Category</th>\r\n			<th>Operator</th>\r\n			<th>Associativity</th>\r\n		</tr>\r\n		<tr>\r\n			<td>Postfix</td>\r\n			<td>expression++ expression--</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Unary</td>\r\n			<td>++expression &ndash;-expression +expression &ndash;expression ~ !</td>\r\n			<td>Right to left</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Multiplicative</td>\r\n			<td>* / %</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Additive</td>\r\n			<td>+ -</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Shift</td>\r\n			<td>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Relational</td>\r\n			<td>&lt; &gt; &lt;= &gt;= instanceof</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Equality</td>\r\n			<td>== !=</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Bitwise AND</td>\r\n			<td>&amp;</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Bitwise XOR</td>\r\n			<td>^</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Bitwise OR</td>\r\n			<td>|</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Logical AND</td>\r\n			<td>&amp;&amp;</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Logical OR</td>\r\n			<td>||</td>\r\n			<td>Left to right</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Conditional</td>\r\n			<td>?:</td>\r\n			<td>Right to left</td>\r\n		</tr>\r\n		<tr>\r\n			<td>Assignment</td>\r\n			<td>= += -= *= /= %= ^= |= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</td>\r\n			<td>Right to left</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>The next chapter will explain about loop control in Java programming. The chapter will describe various types of loops and how these loops can be used in Java program development and for what purposes they are being used.</p>\r\n','Java - Basic Operators'),(41,1,'<h1 style=\"margin-left:120px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\"><strong>Java - Loop Control</strong></span></span></h1>\r\n\r\n<p>There may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on.</p>\r\n\r\n<p>Programming languages provide various control structures that allow for more complicated execution paths.</p>\r\n\r\n<p>A&nbsp;<strong>loop</strong>&nbsp;statement allows us to execute a statement or group of statements multiple times and following is the general form of a loop statement in most of the programming languages &minus;</p>\r\n\r\n<p><img alt=\"Loop Architecture\" src=\"https://www.tutorialspoint.com/java/images/loop_architecture.jpg\" /></p>\r\n\r\n<p>Java programming language provides the following types of loop to handle looping requirements. Click the following links to check their detail.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Loop &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/java_while_loop.htm\">while loop</a>\r\n			<p>Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/java_for_loop.htm\">for loop</a>\r\n			<p>Execute a sequence of statements multiple times and abbreviates the code that manages the loop variable.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/java_do_while_loop.htm\">do...while loop</a>\r\n			<p>Like a while statement, except that it tests the condition at the end of the loop body.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Loop Control Statements</h2>\r\n\r\n<p>Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.</p>\r\n\r\n<p>Java supports the following control statements. Click the following links to check their detail.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Control Statement &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/java_break_statement.htm\">break statement</a>\r\n			<p>Terminates the&nbsp;<strong>loop</strong>&nbsp;or&nbsp;<strong>switch</strong>&nbsp;statement and transfers execution to the statement immediately following the loop or switch.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/java_continue_statement.htm\">continue statement</a>\r\n			<p>Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Enhanced for loop in Java</h2>\r\n\r\n<p>As of Java 5, the enhanced for loop was introduced. This is mainly used to traverse collection of elements including arrays.</p>\r\n\r\n<h3>Syntax</h3>\r\n\r\n<p>Following is the syntax of enhanced for loop &minus;</p>\r\n\r\n<pre>\r\nfor(declaration : expression) {\r\n   // Statements\r\n}\r\n</pre>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Declaration</strong>&nbsp;&minus; The newly declared block variable, is of a type compatible with the elements of the array you are accessing. The variable will be available within the for block and its value would be the same as the current array element.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Expression</strong>&nbsp;&minus; This evaluates to the array you need to loop through. The expression can be an array variable or method call that returns an array.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Example</h3>\r\n\r\n<p><a href=\"http://tpcg.io/4R5ayk\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class Test {\r\n\r\n   public static void main(String args[]) {\r\n      int [] numbers = {10, 20, 30, 40, 50};\r\n\r\n      for(int x : numbers ) {\r\n         System.out.print( x );\r\n         System.out.print(&quot;,&quot;);\r\n      }\r\n      System.out.print(&quot;\n&quot;);\r\n      String [] names = {&quot;James&quot;, &quot;Larry&quot;, &quot;Tom&quot;, &quot;Lacy&quot;};\r\n\r\n      for( String name : names ) {\r\n         System.out.print( name );\r\n         System.out.print(&quot;,&quot;);\r\n      }\r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\n10, 20, 30, 40, 50,\r\nJames, Larry, Tom, Lacy,\r\n</pre>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>In the following chapter, we will be learning about decision making statements in Java programming.</p>\r\n','Java - Loop Control'),(42,1,'<h1 style=\"margin-left:120px\"><span style=\"color:#ffffff\"><span style=\"font-size:24px\"><strong><span style=\"background-color:#3498db\">Java - Decision Making</span></strong></span></span></h1>\r\n\r\n<p>Decision making structures have one or more conditions to be evaluated or tested by the program, along with a statement or statements that are to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.</p>\r\n\r\n<p>Following is the general form of a typical decision making structure found in most of the programming languages &minus;</p>\r\n\r\n<p><img alt=\"Decision Making\" src=\"https://www.tutorialspoint.com/java/images/decision_making.jpg\" /></p>\r\n\r\n<p>Java programming language provides following types of decision making statements. Click the following links to check their detail.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Statement &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/if_statement_in_java.htm\">if statement</a>\r\n			<p>An&nbsp;<strong>if statement</strong>&nbsp;consists of a boolean expression followed by one or more statements.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/if_else_statement_in_java.htm\">if...else statement</a>\r\n			<p>An&nbsp;<strong>if statement</strong>&nbsp;can be followed by an optional&nbsp;<strong>else statement</strong>, which executes when the boolean expression is false.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/nested_if_statements_in_java.htm\">nested if statement</a>\r\n			<p>You can use one&nbsp;<strong>if</strong>&nbsp;or&nbsp;<strong>else if</strong>&nbsp;statement inside another&nbsp;<strong>if</strong>&nbsp;or&nbsp;<strong>else if</strong>statement(s).</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/switch_statement_in_java.htm\">switch statement</a>\r\n			<p>A&nbsp;<strong>switch</strong>&nbsp;statement allows a variable to be tested for equality against a list of values.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>The ? : Operator</h2>\r\n\r\n<p>We have covered&nbsp;<strong>conditional operator ? :</strong>&nbsp;in the previous chapter which can be used to replace&nbsp;<strong>if...else</strong>&nbsp;statements. It has the following general form &minus;</p>\r\n\r\n<pre>\r\nExp1 ? Exp2 : Exp3;\r\n</pre>\r\n\r\n<p>Where Exp1, Exp2, and Exp3 are expressions. Notice the use and placement of the colon.</p>\r\n\r\n<p>To determine the value of the whole expression, initially exp1 is evaluated.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>If the value of exp1 is true, then the value of Exp2 will be the value of the whole expression.</p>\r\n	</li>\r\n	<li>\r\n	<p>If the value of exp1 is false, then Exp3 is evaluated and its value becomes the value of the entire expression.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>In the next chapter, we will discuss about Number class (in the java.lang package) and its subclasses in Java Language.</p>\r\n\r\n<p>We will be looking into some of the situations where you will use instantiations of these classes rather than the primitive data types, as well as classes such as formatting, mathematical functions that you need to know about when working with Numbers.</p>\r\n','Java - Decision Making'),(43,1,'<h1 style=\"margin-left:120px\"><span style=\"color:#3498db\"><span style=\"font-size:24px\"><strong>Java - Numbers Class</strong></span></span></h1>\r\n\r\n<p>Normally, when we work with Numbers, we use primitive data types such as byte, int, long, double, etc.</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<pre>\r\nint i = 5000;\r\nfloat gpa = 13.65;\r\ndouble mask = 0xaf;</pre>\r\n\r\n<p>However, in development, we come across situations where we need to use objects instead of primitive data types. In order to achieve this, Java provides&nbsp;<strong>wrapper classes</strong>.</p>\r\n\r\n<p>All the wrapper classes (Integer, Long, Byte, Double, Float, Short) are subclasses of the abstract class Number.</p>\r\n\r\n<p><img alt=\"Number Classes\" src=\"https://www.tutorialspoint.com/java/images/number_classes.jpg\" /></p>\r\n\r\n<p>The object of the wrapper class contains or wraps its respective primitive data type. Converting primitive data types into object is called&nbsp;<strong>boxing</strong>, and this is taken care by the compiler. Therefore, while using a wrapper class you just need to pass the value of the primitive data type to the constructor of the Wrapper class.</p>\r\n\r\n<p>And the Wrapper object will be converted back to a primitive data type, and this process is called unboxing. The&nbsp;<strong>Number</strong>&nbsp;class is part of the java.lang package.</p>\r\n\r\n<p>Following is an example of boxing and unboxing &minus;</p>\r\n\r\n<h3>Example</h3>\r\n\r\n<p><a href=\"http://tpcg.io/rNELk1\" rel=\"nofollow\" target=\"_blank\">&nbsp;Live Demo</a></p>\r\n\r\n<pre>\r\npublic class Test {\r\n\r\n   public static void main(String args[]) {\r\n      Integer x = 5; // boxes int to an Integer object\r\n      x =  x + 10;   // unboxes the Integer to a int\r\n      System.out.println(x); \r\n   }\r\n}</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<h3>Output</h3>\r\n\r\n<pre>\r\n15\r\n</pre>\r\n\r\n<p>When x is assigned an integer value, the compiler boxes the integer because x is integer object. Later, x is unboxed so that they can be added as an integer.</p>\r\n\r\n<h2>Number Methods</h2>\r\n\r\n<p>Following is the list of the instance methods that all the subclasses of the Number class implements &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Method &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_xxxvalue.htm\">xxxValue()</a>\r\n			<p>Converts the value of&nbsp;<em>this</em>&nbsp;Number object to the xxx data type and returns it.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_compareto.htm\">compareTo()</a>\r\n			<p>Compares&nbsp;<em>this</em>&nbsp;Number object to the argument.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_equals.htm\">equals()</a>\r\n			<p>Determines whether&nbsp;<em>this</em>&nbsp;number object is equal to the argument.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_valueof.htm\">valueOf()</a>\r\n			<p>Returns an Integer object holding the value of the specified primitive.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>5</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_tostring.htm\">toString()</a>\r\n			<p>Returns a String object representing the value of a specified int or Integer.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>6</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_parseint.htm\">parseInt()</a>\r\n			<p>This method is used to get the primitive data type of a certain String.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>7</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_abs.htm\">abs()</a>\r\n			<p>Returns the absolute value of the argument.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>8</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_ceil.htm\">ceil()</a>\r\n			<p>Returns the smallest integer that is greater than or equal to the argument. Returned as a double.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>9</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_floor.htm\">floor()</a>\r\n			<p>Returns the largest integer that is less than or equal to the argument. Returned as a double.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>10</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_rint.htm\">rint()</a>\r\n			<p>Returns the integer that is closest in value to the argument. Returned as a double.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>11</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_round.htm\">round()</a>\r\n			<p>Returns the closest long or int, as indicated by the method&#39;s return type to the argument.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>12</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_min.htm\">min()</a>\r\n			<p>Returns the smaller of the two arguments.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>13</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_max.htm\">max()</a>\r\n			<p>Returns the larger of the two arguments.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>14</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_exp.htm\">exp()</a>\r\n			<p>Returns the base of the natural logarithms, e, to the power of the argument.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>15</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_log.htm\">log()</a>\r\n			<p>Returns the natural logarithm of the argument.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>16</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_pow.htm\">pow()</a>\r\n			<p>Returns the value of the first argument raised to the power of the second argument.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>17</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_sqrt.htm\">sqrt()</a>\r\n			<p>Returns the square root of the argument.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>18</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_sin.htm\">sin()</a>\r\n			<p>Returns the sine of the specified double value.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>19</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_cos.htm\">cos()</a>\r\n			<p>Returns the cosine of the specified double value.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>20</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_tan.htm\">tan()</a>\r\n			<p>Returns the tangent of the specified double value.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>21</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_asin.htm\">asin()</a>\r\n			<p>Returns the arcsine of the specified double value.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>22</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_acos.htm\">acos()</a>\r\n			<p>Returns the arccosine of the specified double value.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>23</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_atan.htm\">atan()</a>\r\n			<p>Returns the arctangent of the specified double value.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>24</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_atan2.htm\">atan2()</a>\r\n			<p>Converts rectangular coordinates (x, y) to polar coordinate (r, theta) and returns theta.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>25</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_todegrees.htm\">toDegrees()</a>\r\n			<p>Converts the argument to degrees.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>26</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_toradians.htm\">toRadians()</a>\r\n			<p>Converts the argument to radians.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>27</td>\r\n			<td><a href=\"https://www.tutorialspoint.com/java/number_random.htm\">random()</a>\r\n			<p>Returns a random number.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>What is Next?</h2>\r\n\r\n<p>In the next section, we will be going through the Character class in Java. You will be learning how to use object Characters and primitive data type char in Java.</p>\r\n','Java - Numbers Class'),(58,5,'<p>CSS selector</p>\r\n','CSS selector'),(59,71,'<p>PHP started out as a small open source project that evolved as more and more people found out how useful it was. Rasmus Lerdorf unleashed the first version of PHP way back in 1994.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>PHP is a recursive acronym for &quot;PHP: Hypertext Preprocessor&quot;.</p>\r\n	</li>\r\n	<li>\r\n	<p>PHP is a server side scripting language that is embedded in HTML. It is used to manage dynamic content, databases, session tracking, even build entire e-commerce sites.</p>\r\n	</li>\r\n	<li>\r\n	<p>It is integrated with a number of popular databases, including MySQL, PostgreSQL, Oracle, Sybase, Informix, and Microsoft SQL Server.</p>\r\n	</li>\r\n	<li>\r\n	<p>PHP is pleasingly zippy in its execution, especially when compiled as an Apache module on the Unix side. The MySQL server, once started, executes even very complex queries with huge result sets in record-setting time.</p>\r\n	</li>\r\n	<li>\r\n	<p>PHP supports a large number of major protocols such as POP3, IMAP, and LDAP. PHP4 added support for Java and distributed object architectures (COM and CORBA), making n-tier development a possibility for the first time.</p>\r\n	</li>\r\n	<li>\r\n	<p>PHP is forgiving: PHP language tries to be as forgiving as possible.</p>\r\n	</li>\r\n	<li>\r\n	<p>PHP Syntax is C-Like.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Common uses of PHP</h2>\r\n\r\n<ul>\r\n	<li>\r\n	<p>PHP performs system functions, i.e. from files on a system it can create, open, read, write, and close them.</p>\r\n	</li>\r\n	<li>\r\n	<p>PHP can handle forms, i.e. gather data from files, save data to a file, through email you can send data, return data to the user.</p>\r\n	</li>\r\n	<li>\r\n	<p>You add, delete, modify elements within your database through PHP.</p>\r\n	</li>\r\n	<li>\r\n	<p>Access cookies variables and set cookies.</p>\r\n	</li>\r\n	<li>\r\n	<p>Using PHP, you can restrict users to access some pages of your website.</p>\r\n	</li>\r\n	<li>\r\n	<p>It can encrypt data.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Characteristics of PHP</h2>\r\n\r\n<p>Five important characteristics make PHP&#39;s practical nature possible &minus;</p>\r\n\r\n<ul>\r\n	<li>Simplicity</li>\r\n	<li>Efficiency</li>\r\n	<li>Security</li>\r\n	<li>Flexibility</li>\r\n	<li>Familiarity</li>\r\n</ul>\r\n\r\n<h2>&quot;Hello World&quot; Script in PHP</h2>\r\n\r\n<p>To get a feel for PHP, first start with simple PHP scripts. Since &quot;Hello, World!&quot; is an essential example, first we will create a friendly little &quot;Hello, World!&quot; script.</p>\r\n\r\n<p>As mentioned earlier, PHP is embedded in HTML. That means that in amongst your normal HTML (or XHTML if you&#39;re cutting-edge) you&#39;ll have PHP statements like this &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/cJf0To\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\r\n\r\n<pre>\r\n&lt;html&gt;\r\n   \r\n   &lt;head&gt;\r\n      &lt;title&gt;Hello World&lt;/title&gt;\r\n   &lt;/head&gt;\r\n   \r\n   &lt;body&gt;\r\n      &lt;?php echo &quot;Hello, World!&quot;;?&gt;\r\n   &lt;/body&gt;\r\n\r\n&lt;/html&gt;</pre>\r\n\r\n<p>It will produce following result &minus;</p>\r\n\r\n<pre>\r\nHello, World!\r\n</pre>\r\n\r\n<p>If you examine the HTML output of the above example, you&#39;ll notice that the PHP code is not present in the file sent from the server to your Web browser. All of the PHP present in the Web page is processed and stripped from the page; the only thing returned to the client from the Web server is pure HTML output.</p>\r\n\r\n<p>All PHP code must be included inside one of the three special markup tags ATE are recognised by the PHP Parser.</p>\r\n\r\n<pre>\r\n&lt;?php PHP code goes here ?&gt;\r\n\r\n&lt;?    PHP code goes here ?&gt;\r\n\r\n&lt;script language = &quot;php&quot;&gt; PHP code goes here &lt;/script&gt;</pre>\r\n\r\n<p>A most common tag is the &lt;?php...?&gt; and we will also use the same tag in our tutorial.</p>\r\n\r\n<p>From the next chapter we will start with PHP Environment Setup on your machine and then we will dig out almost all concepts related to PHP to make you comfortable with the PHP language.</p>\r\n','Introduction'),(60,71,'<p>This chapter will give you an idea of very basic syntax of PHP and very important to make your PHP foundation strong.</p>\r\n\r\n<h2>Escaping to PHP</h2>\r\n\r\n<p>The PHP parsing engine needs a way to differentiate PHP code from other elements in the page. The mechanism for doing so is known as &#39;escaping to PHP&#39;. There are four ways to do this &minus;</p>\r\n\r\n<h3>Canonical PHP tags</h3>\r\n\r\n<p>The most universally effective PHP tag style is &minus;</p>\r\n\r\n<pre>\r\n&lt;?php...?&gt;\r\n</pre>\r\n\r\n<p>If you use this style, you can be positive that your tags will always be correctly interpreted.</p>\r\n\r\n<h3>Short-open (SGML-style) tags</h3>\r\n\r\n<p>Short or short-open tags look like this &minus;</p>\r\n\r\n<pre>\r\n&lt;?...?&gt;\r\n</pre>\r\n\r\n<p>Short tags are, as one might expect, the shortest option You must do one of two things to enable PHP to recognize the tags &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Choose the --enable-short-tags configuration option when you&#39;re building PHP.</p>\r\n	</li>\r\n	<li>\r\n	<p>Set the short_open_tag setting in your php.ini file to on. This option must be disabled to parse XML with PHP because the same syntax is used for XML tags.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h3>ASP-style tags</h3>\r\n\r\n<p>ASP-style tags mimic the tags used by Active Server Pages to delineate code blocks. ASP-style tags look like this &minus;</p>\r\n\r\n<pre>\r\n&lt;%...%&gt;\r\n</pre>\r\n\r\n<p>To use ASP-style tags, you will need to set the configuration option in your php.ini file.</p>\r\n\r\n<h3>HTML script tags</h3>\r\n\r\n<p>HTML script tags look like this &minus;</p>\r\n\r\n<pre>\r\n&lt;script language = &quot;PHP&quot;&gt;...&lt;/script&gt;\r\n</pre>\r\n\r\n<h2>Commenting PHP Code</h2>\r\n\r\n<p>A&nbsp;<em>comment</em>&nbsp;is the portion of a program that exists only for the human reader and stripped out before displaying the programs result. There are two commenting formats in PHP &minus;</p>\r\n\r\n<p><strong>Single-line comments</strong>&nbsp;&minus; They are generally used for short explanations or notes relevant to the local code. Here are the examples of single line comments.</p>\r\n\r\n<pre>\r\n&lt;?\r\n   # This is a comment, and\r\n   # This is the second line of the comment\r\n   \r\n   // This is a comment too. Each style comments only\r\n   print &quot;An example with single line comments&quot;;\r\n?&gt;</pre>\r\n\r\n<p><strong>Multi-lines printing</strong>&nbsp;&minus; Here are the examples to print multiple lines in a single print statement &minus;</p>\r\n\r\n<pre>\r\n&lt;?\r\n   # First Example\r\n   print &lt;&lt;&lt;END\r\n   This uses the &quot;here document&quot; syntax to output\r\n   multiple lines with $variable interpolation. Note\r\n   that the here document terminator must appear on a\r\n   line with just a semicolon no extra whitespace!\r\n   END;\r\n   \r\n   # Second Example\r\n   print &quot;This spans\r\n   multiple lines. The newlines will be\r\n   output as well&quot;;\r\n?&gt;</pre>\r\n\r\n<p><strong>Multi-lines comments</strong>&nbsp;&minus; They are generally used to provide pseudocode algorithms and more detailed explanations when necessary. The multiline style of commenting is the same as in C. Here are the example of multi lines comments.</p>\r\n\r\n<pre>\r\n&lt;?\r\n   /* This is a comment with multiline\r\n      Author : Mohammad Mohtashim\r\n      Purpose: Multiline Comments Demo\r\n      Subject: PHP\r\n   */\r\n   \r\n   print &quot;An example with multi line comments&quot;;\r\n?&gt;</pre>\r\n\r\n<h2>PHP is whitespace insensitive</h2>\r\n\r\n<p>Whitespace is the stuff you type that is typically invisible on the screen, including spaces, tabs, and carriage returns (end-of-line characters).</p>\r\n\r\n<p>PHP whitespace insensitive means that it almost never matters how many whitespace characters you have in a row.one whitespace character is the same as many such characters.</p>\r\n\r\n<p>For example, each of the following PHP statements that assigns the sum of 2 + 2 to the variable $four is equivalent &minus;</p>\r\n\r\n<pre>\r\n$four = 2 + 2; // single spaces\r\n$four &lt;tab&gt;=&lt;tab2&lt;tab&gt;+&lt;tab&gt;2 ; // spaces and tabs\r\n$four =\r\n2+\r\n2; // multiple lines</pre>\r\n\r\n<h2>PHP is case sensitive</h2>\r\n\r\n<p>Yeah it is true that PHP is a case sensitive language. Try out following example &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/T71qHr\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\r\n\r\n<pre>\r\n&lt;html&gt;\r\n   &lt;body&gt;\r\n      \r\n      &lt;?php\r\n         $capital = 67;\r\n         print(&quot;Variable capital is $capital&lt;br&gt;&quot;);\r\n         print(&quot;Variable CaPiTaL is $CaPiTaL&lt;br&gt;&quot;);\r\n      ?&gt;\r\n      \r\n   &lt;/body&gt;\r\n&lt;/html&gt;</pre>\r\n\r\n<p>This will produce the following result &minus;</p>\r\n\r\n<pre>\r\nVariable capital is 67\r\nVariable CaPiTaL is\r\n</pre>\r\n\r\n<h2>Statements are expressions terminated by semicolons</h2>\r\n\r\n<p>A&nbsp;<em>statement</em>&nbsp;in PHP is any expression that is followed by a semicolon (;).Any sequence of valid PHP statements that is enclosed by the PHP tags is a valid PHP program. Here is a typical statement in PHP, which in this case assigns a string of characters to a variable called $greeting &minus;</p>\r\n\r\n<pre>\r\n$greeting = &quot;Welcome to PHP!&quot;;\r\n</pre>\r\n\r\n<h2>Expressions are combinations of tokens</h2>\r\n\r\n<p>The smallest building blocks of PHP are the indivisible tokens, such as numbers (3.14159), strings (.two.), variables ($two), constants (TRUE), and the special words that make up the syntax of PHP itself like if, else, while, for and so forth</p>\r\n\r\n<h2>Braces make blocks</h2>\r\n\r\n<p>Although statements cannot be combined like expressions, you can always put a sequence of statements anywhere a statement can go by enclosing them in a set of curly braces.</p>\r\n\r\n<p>Here both statements are equivalent &minus;</p>\r\n\r\n<pre>\r\nif (3 == 2 + 1)\r\n   print(&quot;Good - I haven&#39;t totally lost my mind.&lt;br&gt;&quot;);\r\n   \r\nif (3 == 2 + 1) {\r\n   print(&quot;Good - I haven&#39;t totally&quot;);\r\n   print(&quot;lost my mind.&lt;br&gt;&quot;);\r\n}</pre>\r\n\r\n<h2>Running PHP Script from Command Prompt</h2>\r\n\r\n<p>Yes you can run your PHP script on your command prompt. Assuming you have following content in test.php file</p>\r\n\r\n<p><a href=\"http://tpcg.io/aOkGT4\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\r\n\r\n<pre>\r\n&lt;?php\r\n   echo &quot;Hello PHP!!!!!&quot;;\r\n?&gt;</pre>\r\n\r\n<p>Now run this script as command prompt as follows &minus;</p>\r\n\r\n<pre>\r\n$ php test.php\r\n</pre>\r\n\r\n<p>It will produce the following result &minus;</p>\r\n\r\n<pre>\r\nHello PHP!!!!!\r\n</pre>\r\n\r\n<p>Hope now you have basic knowledge of PHP Syntax.</p>\r\n','Basic Syntax'),(61,71,'<p>The main way to store information in the middle of a PHP program is by using a variable.</p>\r\n\r\n<p>Here are the most important things to know about variables in PHP.</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>All variables in PHP are denoted with a leading dollar sign ($).</p>\r\n	</li>\r\n	<li>\r\n	<p>The value of a variable is the value of its most recent assignment.</p>\r\n	</li>\r\n	<li>\r\n	<p>Variables are assigned with the = operator, with the variable on the left-hand side and the expression to be evaluated on the right.</p>\r\n	</li>\r\n	<li>\r\n	<p>Variables can, but do not need, to be declared before assignment.</p>\r\n	</li>\r\n	<li>\r\n	<p>Variables in PHP do not have intrinsic types - a variable does not know in advance whether it will be used to store a number or a string of characters.</p>\r\n	</li>\r\n	<li>\r\n	<p>Variables used before they are assigned have default values.</p>\r\n	</li>\r\n	<li>\r\n	<p>PHP does a good job of automatically converting types from one to another when necessary.</p>\r\n	</li>\r\n	<li>\r\n	<p>PHP variables are Perl-like.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>PHP has a total of eight data types which we use to construct our variables &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Integers</strong>&nbsp;&minus; are whole numbers, without a decimal point, like 4195.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Doubles</strong>&nbsp;&minus; are floating-point numbers, like 3.14159 or 49.1.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Booleans</strong>&nbsp;&minus; have only two possible values either true or false.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>NULL</strong>&nbsp;&minus; is a special type that only has one value: NULL.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Strings</strong>&nbsp;&minus; are sequences of characters, like &#39;PHP supports string operations.&#39;</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Arrays</strong>&nbsp;&minus; are named and indexed collections of other values.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Objects</strong>&nbsp;&minus; are instances of programmer-defined classes, which can package up both other kinds of values and functions that are specific to the class.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Resources</strong>&nbsp;&minus; are special variables that hold references to resources external to PHP (such as database connections).</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>The first five are&nbsp;<em>simple types</em>, and the next two (arrays and objects) are compound - the compound types can package up other arbitrary values of arbitrary type, whereas the simple types cannot.</p>\r\n\r\n<p>We will explain only simple data type in this chapters. Array and Objects will be explained separately.</p>\r\n\r\n<h2>Integers</h2>\r\n\r\n<p>They are whole numbers, without a decimal point, like 4195. They are the simplest type .they correspond to simple whole numbers, both positive and negative. Integers can be assigned to variables, or they can be used in expressions, like so &minus;</p>\r\n\r\n<pre>\r\n$int_var = 12345;\r\n$another_int = -12345 + 12345;\r\n</pre>\r\n\r\n<p>Integer can be in decimal (base 10), octal (base 8), and hexadecimal (base 16) format. Decimal format is the default, octal integers are specified with a leading 0, and hexadecimals have a leading 0x.</p>\r\n\r\n<p>For most common platforms, the largest integer is (2**31 . 1) (or 2,147,483,647), and the smallest (most negative) integer is . (2**31 . 1) (or .2,147,483,647).</p>\r\n\r\n<h2>Doubles</h2>\r\n\r\n<p>They like 3.14159 or 49.1. By default, doubles print with the minimum number of decimal places needed. For example, the code &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/X97Lmh\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\r\n\r\n<pre>\r\n&lt;?php\r\n   $many = 2.2888800;\r\n   $many_2 = 2.2111200;\r\n   $few = $many + $many_2;\r\n   \r\n   print(&quot;$many + $many_2 = $few &lt;br&gt;&quot;);\r\n?&gt;</pre>\r\n\r\n<p>It produces the following browser output &minus;</p>\r\n\r\n<pre>\r\n2.28888 + 2.21112 = 4.5\r\n</pre>\r\n\r\n<h2>Boolean</h2>\r\n\r\n<p>They have only two possible values either true or false. PHP provides a couple of constants especially for use as Booleans: TRUE and FALSE, which can be used like so &minus;</p>\r\n\r\n<pre>\r\nif (TRUE)\r\n   print(&quot;This will always print&lt;br&gt;&quot;);\r\n\r\nelse\r\n   print(&quot;This will never print&lt;br&gt;&quot;);</pre>\r\n\r\n<h3>Interpreting other types as Booleans</h3>\r\n\r\n<p>Here are the rules for determine the &quot;truth&quot; of any value not already of the Boolean type &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>If the value is a number, it is false if exactly equal to zero and true otherwise.</p>\r\n	</li>\r\n	<li>\r\n	<p>If the value is a string, it is false if the string is empty (has zero characters) or is the string &quot;0&quot;, and is true otherwise.</p>\r\n	</li>\r\n	<li>\r\n	<p>Values of type NULL are always false.</p>\r\n	</li>\r\n	<li>\r\n	<p>If the value is an array, it is false if it contains no other values, and it is true otherwise. For an object, containing a value means having a member variable that has been assigned a value.</p>\r\n	</li>\r\n	<li>\r\n	<p>Valid resources are true (although some functions that return resources when they are successful will return FALSE when unsuccessful).</p>\r\n	</li>\r\n	<li>\r\n	<p>Don&#39;t use double as Booleans.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>Each of the following variables has the truth value embedded in its name when it is used in a Boolean context.</p>\r\n\r\n<pre>\r\n$true_num = 3 + 0.14159;\r\n$true_str = &quot;Tried and true&quot;\r\n$true_array[49] = &quot;An array element&quot;;\r\n$false_array = array();\r\n$false_null = NULL;\r\n$false_num = 999 - 999;\r\n$false_str = &quot;&quot;;</pre>\r\n\r\n<h2>NULL</h2>\r\n\r\n<p>NULL is a special type that only has one value: NULL. To give a variable the NULL value, simply assign it like this &minus;</p>\r\n\r\n<pre>\r\n$my_var = NULL;</pre>\r\n\r\n<p>The special constant NULL is capitalized by convention, but actually it is case insensitive; you could just as well have typed &minus;</p>\r\n\r\n<pre>\r\n$my_var = null;</pre>\r\n\r\n<p>A variable that has been assigned NULL has the following properties &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>It evaluates to FALSE in a Boolean context.</p>\r\n	</li>\r\n	<li>\r\n	<p>It returns FALSE when tested with IsSet() function.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Strings</h2>\r\n\r\n<p>They are sequences of characters, like &quot;PHP supports string operations&quot;. Following are valid examples of string</p>\r\n\r\n<pre>\r\n$string_1 = &quot;This is a string in double quotes&quot;;\r\n$string_2 = &#39;This is a somewhat longer, singly quoted string&#39;;\r\n$string_39 = &quot;This string has thirty-nine characters&quot;;\r\n$string_0 = &quot;&quot;; // a string with zero characters</pre>\r\n\r\n<p>Singly quoted strings are treated almost literally, whereas doubly quoted strings replace variables with their values as well as specially interpreting certain character sequences.</p>\r\n\r\n<p><a href=\"http://tpcg.io/A5EYas\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\r\n\r\n<pre>\r\n&lt;?php\r\n   $variable = &quot;name&quot;;\r\n   $literally = &#39;My $variable will not print!&#39;;\r\n   \r\n   print($literally);\r\n   print &quot;&lt;br&gt;&quot;;\r\n   \r\n   $literally = &quot;My $variable will print!&quot;;\r\n   print($literally);\r\n?&gt;</pre>\r\n\r\n<p>This will produce following result &minus;</p>\r\n\r\n<pre>\r\nMy $variable will not print!\r\nMy name will print\r\n</pre>\r\n\r\n<p>There are no artificial limits on string length - within the bounds of available memory, you ought to be able to make arbitrarily long strings.</p>\r\n\r\n<p>Strings that are delimited by double quotes (as in &quot;this&quot;) are preprocessed in both the following two ways by PHP &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Certain character sequences beginning with backslash (\\) are replaced with special characters</p>\r\n	</li>\r\n	<li>\r\n	<p>Variable names (starting with $) are replaced with string representations of their values.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>The escape-sequence replacements are &minus;</p>\r\n\r\n<ul>\r\n	<li>\\n is replaced by the newline character</li>\r\n	<li>\\r is replaced by the carriage-return character</li>\r\n	<li>\\t is replaced by the tab character</li>\r\n	<li>\\$ is replaced by the dollar sign itself ($)</li>\r\n	<li>\\&quot; is replaced by a single double-quote (&quot;)</li>\r\n	<li>\\\\ is replaced by a single backslash (\\)</li>\r\n</ul>\r\n\r\n<h3>Here Document</h3>\r\n\r\n<p>You can assign multiple lines to a single string variable using here document &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/Uq3o1a\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\r\n\r\n<pre>\r\n&lt;?php\r\n   $channel =&lt;&lt;&lt;_XML_\r\n   \r\n   &lt;channel&gt;\r\n      &lt;title&gt;What&#39;s For Dinner&lt;/title&gt;\r\n      &lt;link&gt;http://menu.example.com/ &lt;/link&gt;\r\n      &lt;description&gt;Choose what to eat tonight.&lt;/description&gt;\r\n   &lt;/channel&gt;\r\n   _XML_;\r\n   \r\n   echo &lt;&lt;&lt;END\r\n   This uses the &quot;here document&quot; syntax to output multiple lines with variable \r\n   interpolation. Note that the here document terminator must appear on a line with \r\n   just a semicolon. no extra whitespace!\r\n   \r\n\r\n   END;\r\n   \r\n   print $channel;\r\n?&gt;</pre>\r\n\r\n<p>This will produce following result &minus;</p>\r\n\r\n<pre>\r\nThis uses the &quot;here document&quot; syntax to output\r\nmultiple lines with variable interpolation. Note\r\nthat the here document terminator must appear on a\r\nline with just a semicolon. no extra whitespace!\r\n\r\n&lt;channel&gt;\r\n&lt;title&gt;What&#39;s For Dinner&lt;title&gt;\r\n&lt;link&gt;http://menu.example.com/&lt;link&gt;\r\n&lt;description&gt;Choose what to eat tonight.&lt;/description&gt;\r\n</pre>\r\n\r\n<h2>Variable Scope</h2>\r\n\r\n<p>Scope can be defined as the range of availability a variable has to the program in which it is declared. PHP variables can be one of four scope types &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><a href=\"https://www.tutorialspoint.com/php/php_local_variables.htm\">Local variables</a></p>\r\n	</li>\r\n	<li>\r\n	<p><a href=\"https://www.tutorialspoint.com/php/php_function_parameters.htm\">Function parameters</a></p>\r\n	</li>\r\n	<li>\r\n	<p><a href=\"https://www.tutorialspoint.com/php/php_global_variables.htm\">Global variables</a></p>\r\n	</li>\r\n	<li>\r\n	<p><a href=\"https://www.tutorialspoint.com/php/php_static_variables.htm\">Static variables</a></p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Variable Naming</h2>\r\n\r\n<p>Rules for naming a variable is &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p>Variable names must begin with a letter or underscore character.</p>\r\n	</li>\r\n	<li>\r\n	<p>A variable name can consist of numbers, letters, underscores but you cannot use characters like + , - , % , ( , ) . &amp; , etc</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>There is no size limit for variables.</p>\r\n','Variable types'),(62,3,'<p>C is a general-purpose, high-level language that was originally developed by Dennis M. Ritchie to develop the UNIX operating system at Bell Labs. C was originally first implemented on the DEC PDP-11 computer in 1972.</p>\r\n\r\n<p>In 1978, Brian Kernighan and Dennis Ritchie produced the first publicly available description of C, now known as the K&amp;R standard.</p>\r\n\r\n<p>The UNIX operating system, the C compiler, and essentially all UNIX application programs have been written in C. C has now become a widely used professional language for various reasons &minus;</p>\r\n\r\n<ul>\r\n	<li>Easy to learn</li>\r\n	<li>Structured language</li>\r\n	<li>It produces efficient programs</li>\r\n	<li>It can handle low-level activities</li>\r\n	<li>It can be compiled on a variety of computer platforms</li>\r\n</ul>\r\n\r\n<h2>Facts about C</h2>\r\n\r\n<ul>\r\n	<li>\r\n	<p>C was invented to write an operating system called UNIX.</p>\r\n	</li>\r\n	<li>\r\n	<p>C is a successor of B language which was introduced around the early 1970s.</p>\r\n	</li>\r\n	<li>\r\n	<p>The language was formalized in 1988 by the American National Standard Institute (ANSI).</p>\r\n	</li>\r\n	<li>\r\n	<p>The UNIX OS was totally written in C.</p>\r\n	</li>\r\n	<li>\r\n	<p>Today C is the most widely used and popular System Programming Language.</p>\r\n	</li>\r\n	<li>\r\n	<p>Most of the state-of-the-art software have been implemented using C.</p>\r\n	</li>\r\n	<li>\r\n	<p>Today&#39;s most popular Linux OS and RDBMS MySQL have been written in C.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Why use C?</h2>\r\n\r\n<p>C was initially used for system development work, particularly the programs that make-up the operating system. C was adopted as a system development language because it produces code that runs nearly as fast as the code written in assembly language. Some examples of the use of C might be &minus;</p>\r\n\r\n<ul>\r\n	<li>Operating Systems</li>\r\n	<li>Language Compilers</li>\r\n	<li>Assemblers</li>\r\n	<li>Text Editors</li>\r\n	<li>Print Spoolers</li>\r\n	<li>Network Drivers</li>\r\n	<li>Modern Programs</li>\r\n	<li>Databases</li>\r\n	<li>Language Interpreters</li>\r\n	<li>Utilities</li>\r\n</ul>\r\n\r\n<h2>C Programs</h2>\r\n\r\n<p>A C program can vary from 3 lines to millions of lines and it should be written into one or more text files with extension&nbsp;<strong>&quot;.c&quot;</strong>; for example,&nbsp;<em>hello.c</em>. You can use&nbsp;<strong>&quot;vi&quot;</strong>,&nbsp;<strong>&quot;vim&quot;</strong>&nbsp;or any other text editor to write your C program into a file.</p>\r\n','Overview'),(63,3,'<h2>Tokens in C</h2>\r\n\r\n<p>A C program consists of various tokens and a token is either a keyword, an identifier, a constant, a string literal, or a symbol. For example, the following C statement consists of five tokens &minus;</p>\r\n\r\n<pre>\r\nprintf(&quot;Hello, World! \\n&quot;);</pre>\r\n\r\n<p>The individual tokens are &minus;</p>\r\n\r\n<pre>\r\nprintf\r\n(\r\n   &quot;Hello, World! \\n&quot;\r\n)\r\n;</pre>\r\n\r\n<h2>Semicolons</h2>\r\n\r\n<p>In a C program, the semicolon is a statement terminator. That is, each individual statement must be ended with a semicolon. It indicates the end of one logical entity.</p>\r\n\r\n<p>Given below are two different statements &minus;</p>\r\n\r\n<pre>\r\nprintf(&quot;Hello, World! \\n&quot;);\r\nreturn 0;</pre>\r\n\r\n<h2>Comments</h2>\r\n\r\n<p>Comments are like helping text in your C program and they are ignored by the compiler. They start with /* and terminate with the characters */ as shown below &minus;</p>\r\n\r\n<pre>\r\n/* my first program in C */\r\n</pre>\r\n\r\n<p>You cannot have comments within comments and they do not occur within a string or character literals.</p>\r\n\r\n<h2>Identifiers</h2>\r\n\r\n<p>A C identifier is a name used to identify a variable, function, or any other user-defined item. An identifier starts with a letter A to Z, a to z, or an underscore &#39;_&#39; followed by zero or more letters, underscores, and digits (0 to 9).</p>\r\n\r\n<p>C does not allow punctuation characters such as @, $, and % within identifiers. C is a&nbsp;<strong>case-sensitive</strong>&nbsp;programming language. Thus,&nbsp;<em>Manpower</em>&nbsp;and&nbsp;<em>manpower</em>&nbsp;are two different identifiers in C. Here are some examples of acceptable identifiers &minus;</p>\r\n\r\n<pre>\r\nmohd       zara    abc   move_name  a_123\r\nmyname50   _temp   j     a23b9      retVal\r\n</pre>\r\n\r\n<h2>Keywords</h2>\r\n\r\n<p>The following list shows the reserved words in C. These reserved words may not be used as constants or variables or any other identifier names.</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<td>auto</td>\r\n			<td>else</td>\r\n			<td>long</td>\r\n			<td>switch</td>\r\n		</tr>\r\n		<tr>\r\n			<td>break</td>\r\n			<td>enum</td>\r\n			<td>register</td>\r\n			<td>typedef</td>\r\n		</tr>\r\n		<tr>\r\n			<td>case</td>\r\n			<td>extern</td>\r\n			<td>return</td>\r\n			<td>union</td>\r\n		</tr>\r\n		<tr>\r\n			<td>char</td>\r\n			<td>float</td>\r\n			<td>short</td>\r\n			<td>unsigned</td>\r\n		</tr>\r\n		<tr>\r\n			<td>const</td>\r\n			<td>for</td>\r\n			<td>signed</td>\r\n			<td>void</td>\r\n		</tr>\r\n		<tr>\r\n			<td>continue</td>\r\n			<td>goto</td>\r\n			<td>sizeof</td>\r\n			<td>volatile</td>\r\n		</tr>\r\n		<tr>\r\n			<td>default</td>\r\n			<td>if</td>\r\n			<td>static</td>\r\n			<td>while</td>\r\n		</tr>\r\n		<tr>\r\n			<td>do</td>\r\n			<td>int</td>\r\n			<td>struct</td>\r\n			<td>_Packed</td>\r\n		</tr>\r\n		<tr>\r\n			<td>double</td>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h2>Whitespace in C</h2>\r\n\r\n<p>A line containing only whitespace, possibly with a comment, is known as a blank line, and a C compiler totally ignores it.</p>\r\n\r\n<p>Whitespace is the term used in C to describe blanks, tabs, newline characters and comments. Whitespace separates one part of a statement from another and enables the compiler to identify where one element in a statement, such as int, ends and the next element begins. Therefore, in the following statement &minus;</p>\r\n\r\n<pre>\r\nint age;</pre>\r\n\r\n<p>there must be at least one whitespace character (usually a space) between int and age for the compiler to be able to distinguish them. On the other hand, in the following statement &minus;</p>\r\n\r\n<pre>\r\nfruit = apples + oranges;   // get the total fruit</pre>\r\n\r\n<p>no whitespace characters are necessary between fruit and =, or between = and apples, although you are free to include some if you wish to increase readability.</p>\r\n','Basic syntax'),(64,3,'<p>Data types in c refer to an extensive system used for declaring variables or functions of different types. The type of a variable determines how much space it occupies in storage and how the bit pattern stored is interpreted.</p>\r\n\r\n<p>The types in C can be classified as follows &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Types &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>\r\n			<p><strong>Basic Types</strong></p>\r\n\r\n			<p>They are arithmetic types and are further classified into: (a) integer types and (b) floating-point types.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>\r\n			<p><strong>Enumerated types</strong></p>\r\n\r\n			<p>They are again arithmetic types and they are used to define variables that can only assign certain discrete integer values throughout the program.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td>\r\n			<p><strong>The type void</strong></p>\r\n\r\n			<p>The type specifier&nbsp;<em>void</em>&nbsp;indicates that no value is available.</p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>4</td>\r\n			<td>\r\n			<p><strong>Derived types</strong></p>\r\n\r\n			<p>They include (a) Pointer types, (b) Array types, (c) Structure types, (d) Union types and (e) Function types.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>The array types and structure types are referred collectively as the aggregate types. The type of a function specifies the type of the function&#39;s return value. We will see the basic types in the following section, where as other types will be covered in the upcoming chapters.</p>\r\n\r\n<h2>Integer Types</h2>\r\n\r\n<p>The following table provides the details of standard integer types with their storage sizes and value ranges &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Type</th>\r\n			<th>Storage size</th>\r\n			<th>Value range</th>\r\n		</tr>\r\n		<tr>\r\n			<td>char</td>\r\n			<td>1 byte</td>\r\n			<td>-128 to 127 or 0 to 255</td>\r\n		</tr>\r\n		<tr>\r\n			<td>unsigned char</td>\r\n			<td>1 byte</td>\r\n			<td>0 to 255</td>\r\n		</tr>\r\n		<tr>\r\n			<td>signed char</td>\r\n			<td>1 byte</td>\r\n			<td>-128 to 127</td>\r\n		</tr>\r\n		<tr>\r\n			<td>int</td>\r\n			<td>2 or 4 bytes</td>\r\n			<td>-32,768 to 32,767 or -2,147,483,648 to 2,147,483,647</td>\r\n		</tr>\r\n		<tr>\r\n			<td>unsigned int</td>\r\n			<td>2 or 4 bytes</td>\r\n			<td>0 to 65,535 or 0 to 4,294,967,295</td>\r\n		</tr>\r\n		<tr>\r\n			<td>short</td>\r\n			<td>2 bytes</td>\r\n			<td>-32,768 to 32,767</td>\r\n		</tr>\r\n		<tr>\r\n			<td>unsigned short</td>\r\n			<td>2 bytes</td>\r\n			<td>0 to 65,535</td>\r\n		</tr>\r\n		<tr>\r\n			<td>long</td>\r\n			<td>8 bytes or (4bytes for 32 bit OS)</td>\r\n			<td>-9223372036854775808 to 9223372036854775807</td>\r\n		</tr>\r\n		<tr>\r\n			<td>unsigned long</td>\r\n			<td>8 bytes</td>\r\n			<td>0 to 18446744073709551615</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>To get the exact size of a type or a variable on a particular platform, you can use the&nbsp;<strong>sizeof</strong>&nbsp;operator. The expressions&nbsp;<em>sizeof(type)</em>&nbsp;yields the storage size of the object or type in bytes. Given below is an example to get the size of various type on a machine using different constant defined in limits.h header file &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/FnrxP5\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\r\n\r\n<pre>\r\n#include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\n#include &lt;limits.h&gt;\r\n#include &lt;float.h&gt;\r\n\r\nint main(int argc, char** argv) {\r\n\r\n    printf(&quot;CHAR_BIT    :   %d\\n&quot;, CHAR_BIT);\r\n    printf(&quot;CHAR_MAX    :   %d\\n&quot;, CHAR_MAX);\r\n    printf(&quot;CHAR_MIN    :   %d\\n&quot;, CHAR_MIN);\r\n    printf(&quot;INT_MAX     :   %d\\n&quot;, INT_MAX);\r\n    printf(&quot;INT_MIN     :   %d\\n&quot;, INT_MIN);\r\n    printf(&quot;LONG_MAX    :   %ld\\n&quot;, (long) LONG_MAX);\r\n    printf(&quot;LONG_MIN    :   %ld\\n&quot;, (long) LONG_MIN);\r\n    printf(&quot;SCHAR_MAX   :   %d\\n&quot;, SCHAR_MAX);\r\n    printf(&quot;SCHAR_MIN   :   %d\\n&quot;, SCHAR_MIN);\r\n    printf(&quot;SHRT_MAX    :   %d\\n&quot;, SHRT_MAX);\r\n    printf(&quot;SHRT_MIN    :   %d\\n&quot;, SHRT_MIN);\r\n    printf(&quot;UCHAR_MAX   :   %d\\n&quot;, UCHAR_MAX);\r\n    printf(&quot;UINT_MAX    :   %u\\n&quot;, (unsigned int) UINT_MAX);\r\n    printf(&quot;ULONG_MAX   :   %lu\\n&quot;, (unsigned long) ULONG_MAX);\r\n    printf(&quot;USHRT_MAX   :   %d\\n&quot;, (unsigned short) USHRT_MAX);\r\n\r\n    return 0;\r\n}</pre>\r\n\r\n<p>When you compile and execute the above program, it produces the following result on Linux &minus;</p>\r\n\r\n<pre>\r\nCHAR_BIT    :   8\r\nCHAR_MAX    :   127\r\nCHAR_MIN    :   -128\r\nINT_MAX     :   2147483647\r\nINT_MIN     :   -2147483648\r\nLONG_MAX    :   9223372036854775807\r\nLONG_MIN    :   -9223372036854775808\r\nSCHAR_MAX   :   127\r\nSCHAR_MIN   :   -128\r\nSHRT_MAX    :   32767\r\nSHRT_MIN    :   -32768\r\nUCHAR_MAX   :   255\r\nUINT_MAX    :   4294967295\r\nULONG_MAX   :   18446744073709551615\r\nUSHRT_MAX   :   65535\r\n</pre>\r\n\r\n<h2>Floating-Point Types</h2>\r\n\r\n<p>The following table provide the details of standard floating-point types with storage sizes and value ranges and their precision &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Type</th>\r\n			<th>Storage size</th>\r\n			<th>Value range</th>\r\n			<th>Precision</th>\r\n		</tr>\r\n		<tr>\r\n			<td>float</td>\r\n			<td>4 byte</td>\r\n			<td>1.2E-38 to 3.4E+38</td>\r\n			<td>6 decimal places</td>\r\n		</tr>\r\n		<tr>\r\n			<td>double</td>\r\n			<td>8 byte</td>\r\n			<td>2.3E-308 to 1.7E+308</td>\r\n			<td>15 decimal places</td>\r\n		</tr>\r\n		<tr>\r\n			<td>long double</td>\r\n			<td>10 byte</td>\r\n			<td>3.4E-4932 to 1.1E+4932</td>\r\n			<td>19 decimal places</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>The header file float.h defines macros that allow you to use these values and other details about the binary representation of real numbers in your programs. The following example prints the storage space taken by a float type and its range values &minus;</p>\r\n\r\n<p><a href=\"http://tpcg.io/mynMA1\" rel=\"nofollow\" target=\"_blank\">Live Demo</a></p>\r\n\r\n<pre>\r\n#include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\n#include &lt;limits.h&gt;\r\n#include &lt;float.h&gt;\r\n\r\nint main(int argc, char** argv) {\r\n\r\n    printf(&quot;Storage size for float : %d \\n&quot;, sizeof(float));\r\n    printf(&quot;FLT_MAX     :   %g\\n&quot;, (float) FLT_MAX);\r\n    printf(&quot;FLT_MIN     :   %g\\n&quot;, (float) FLT_MIN);\r\n    printf(&quot;-FLT_MAX    :   %g\\n&quot;, (float) -FLT_MAX);\r\n    printf(&quot;-FLT_MIN    :   %g\\n&quot;, (float) -FLT_MIN);\r\n    printf(&quot;DBL_MAX     :   %g\\n&quot;, (double) DBL_MAX);\r\n    printf(&quot;DBL_MIN     :   %g\\n&quot;, (double) DBL_MIN);\r\n    printf(&quot;-DBL_MAX     :  %g\\n&quot;, (double) -DBL_MAX);\r\n    printf(&quot;Precision value: %d\\n&quot;, FLT_DIG );\r\n\r\n    return 0;\r\n}</pre>\r\n\r\n<p>When you compile and execute the above program, it produces the following result on Linux &minus;</p>\r\n\r\n<pre>\r\nStorage size for float : 4 \r\nFLT_MAX      :   3.40282e+38\r\nFLT_MIN      :   1.17549e-38\r\n-FLT_MAX     :   -3.40282e+38\r\n-FLT_MIN     :   -1.17549e-38\r\nDBL_MAX      :   1.79769e+308\r\nDBL_MIN      :   2.22507e-308\r\n-DBL_MAX     :  -1.79769e+308\r\nPrecision value: 6\r\n</pre>\r\n\r\n<h2>The void Type</h2>\r\n\r\n<p>The void type specifies that no value is available. It is used in three kinds of situations &minus;</p>\r\n\r\n<table>\r\n	<tbody>\r\n		<tr>\r\n			<th>Sr.No.</th>\r\n			<th>Types &amp; Description</th>\r\n		</tr>\r\n		<tr>\r\n			<td>1</td>\r\n			<td>\r\n			<p><strong>Function returns as void</strong></p>\r\n\r\n			<p>There are various functions in C which do not return any value or you can say they return void. A function with no return value has the return type as void. For example,&nbsp;<strong>void exit (int status);</strong></p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>2</td>\r\n			<td>\r\n			<p><strong>Function arguments as void</strong></p>\r\n\r\n			<p>There are various functions in C which do not accept any parameter. A function with no parameter can accept a void. For example,&nbsp;<strong>int rand(void);</strong></p>\r\n			</td>\r\n		</tr>\r\n		<tr>\r\n			<td>3</td>\r\n			<td>\r\n			<p><strong>Pointers to void</strong></p>\r\n\r\n			<p>A pointer of type void * represents the address of an object, but not its type. For example, a memory allocation function&nbsp;<strong>void *malloc( size_t size );</strong>&nbsp;returns a pointer to void which can be casted to any data type.</p>\r\n			</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n','Data types'),(65,4,'<p>Android operating system is a stack of software components which is roughly divided into five sections and four main layers as shown below in the architecture diagram.</p>\r\n\r\n<p><img alt=\"Android Architecture\" src=\"https://www.tutorialspoint.com/android/images/architecture.jpg\" /></p>\r\n\r\n<h2>Linux kernel</h2>\r\n\r\n<p>At the bottom of the layers is Linux - Linux 3.6 with approximately 115 patches. This provides a level of abstraction between the device hardware and it contains all the essential hardware drivers like camera, keypad, display etc. Also, the kernel handles all the things that Linux is really good at such as networking and a vast array of device drivers, which take the pain out of interfacing to peripheral hardware.</p>\r\n\r\n<h2>Libraries</h2>\r\n\r\n<p>On top of Linux kernel there is a set of libraries including open-source Web browser engine WebKit, well known library libc, SQLite database which is a useful repository for storage and sharing of application data, libraries to play and record audio and video, SSL libraries responsible for Internet security etc.</p>\r\n\r\n<h2>Android Libraries</h2>\r\n\r\n<p>This category encompasses those Java-based libraries that are specific to Android development. Examples of libraries in this category include the application framework libraries in addition to those that facilitate user interface building, graphics drawing and database access. A summary of some key core Android libraries available to the Android developer is as follows &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>android.app</strong>&nbsp;&minus; Provides access to the application model and is the cornerstone of all Android applications.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>android.content</strong>&nbsp;&minus; Facilitates content access, publishing and messaging between applications and application components.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>android.database</strong>&nbsp;&minus; Used to access data published by content providers and includes SQLite database management classes.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>android.opengl</strong>&nbsp;&minus; A Java interface to the OpenGL ES 3D graphics rendering API.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>android.os</strong>&nbsp;&minus; Provides applications with access to standard operating system services including messages, system services and inter-process communication.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>android.text</strong>&nbsp;&minus; Used to render and manipulate text on a device display.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>android.view</strong>&nbsp;&minus; The fundamental building blocks of application user interfaces.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>android.widget</strong>&nbsp;&minus; A rich collection of pre-built user interface components such as buttons, labels, list views, layout managers, radio buttons etc.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>android.webkit</strong>&nbsp;&minus; A set of classes intended to allow web-browsing capabilities to be built into applications.</p>\r\n	</li>\r\n</ul>\r\n\r\n<p>Having covered the Java-based core libraries in the Android runtime, it is now time to turn our attention to the C/C++ based libraries contained in this layer of the Android software stack.</p>\r\n\r\n<h2>Android Runtime</h2>\r\n\r\n<p>This is the third section of the architecture and available on the second layer from the bottom. This section provides a key component called&nbsp;<strong>Dalvik Virtual Machine</strong>&nbsp;which is a kind of Java Virtual Machine specially designed and optimized for Android.</p>\r\n\r\n<p>The Dalvik VM makes use of Linux core features like memory management and multi-threading, which is intrinsic in the Java language. The Dalvik VM enables every Android application to run in its own process, with its own instance of the Dalvik virtual machine.</p>\r\n\r\n<p>The Android runtime also provides a set of core libraries which enable Android application developers to write Android applications using standard Java programming language.</p>\r\n\r\n<h2>Application Framework</h2>\r\n\r\n<p>The Application Framework layer provides many higher-level services to applications in the form of Java classes. Application developers are allowed to make use of these services in their applications.</p>\r\n\r\n<p>The Android framework includes the following key services &minus;</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>Activity Manager</strong>&nbsp;&minus; Controls all aspects of the application lifecycle and activity stack.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Content Providers</strong>&nbsp;&minus; Allows applications to publish and share data with other applications.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Resource Manager</strong>&nbsp;&minus; Provides access to non-code embedded resources such as strings, color settings and user interface layouts.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Notifications Manager</strong>&nbsp;&minus; Allows applications to display alerts and notifications to the user.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>View System</strong>&nbsp;&minus; An extensible set of views used to create application user interfaces.</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Applications</h2>\r\n\r\n<p>You will find all the Android application at the top layer. You will write your application to be installed on this layer only. Examples of such applications are Contacts Books, Browser, Games etc.</p>\r\n','Architecture');
/*!40000 ALTER TABLE `course_topics` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `course_video_topics`
--

DROP TABLE IF EXISTS `course_video_topics`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `course_video_topics` (
  `id` int NOT NULL AUTO_INCREMENT,
  `video_path` varchar(255) DEFAULT NULL,
  `topic_name` varchar(255) DEFAULT NULL,
  `topic_image` varchar(255) DEFAULT NULL,
  `course_id` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `course_video_fk` (`course_id`),
  CONSTRAINT `course_video_fk` FOREIGN KEY (`course_id`) REFERENCES `course_videos` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `course_video_topics`
--

LOCK TABLES `course_video_topics` WRITE;
/*!40000 ALTER TABLE `course_video_topics` DISABLE KEYS */;
INSERT INTO `course_video_topics` VALUES (2,'https://www.youtube.com/embed/LGKniBZoxvc','How to download jcalender in Netbeans','upload_imgs/images.jpeg',1),(3,'https://www.youtube.com/embed/QmKJrnt4rQg','How to download jcalender in Netbeans','upload_imgs/images.png',1),(4,'https://www.youtube.com/embed/KgUp3FomMoc','How To Install PHP','upload_imgs/2022-05-15-6280ac5490961.png',5),(5,'https://www.youtube.com/embed/HrtS-FkPBqk','Basic PHP Syntax','upload_imgs/2022-05-15-6280ac3fa039c.png',5),(6,'https://www.youtube.com/embed/6JtP8xk1U_k','PHP Variables','upload_imgs/2022-05-15-6280ac9c0544d.png',5),(7,'https://www.youtube.com/embed/KH4MmQsCDuw','PHP data types','upload_imgs/2022-05-15-6280acbae4d69.png',5);
/*!40000 ALTER TABLE `course_video_topics` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `course_videos`
--

DROP TABLE IF EXISTS `course_videos`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `course_videos` (
  `id` int NOT NULL AUTO_INCREMENT,
  `course_name` varchar(255) DEFAULT NULL,
  `course_description` varchar(255) DEFAULT NULL,
  `course_image` varchar(255) DEFAULT NULL,
  `user_id` int DEFAULT NULL,
  `language_id` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `course_video_user_id_fk` (`user_id`),
  KEY `course_video_language_fk` (`language_id`),
  CONSTRAINT `course_video_language_fk` FOREIGN KEY (`language_id`) REFERENCES `languages` (`lang_id`) ON DELETE SET NULL,
  CONSTRAINT `course_video_user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `course_videos`
--

LOCK TABLES `course_videos` WRITE;
/*!40000 ALTER TABLE `course_videos` DISABLE KEYS */;
INSERT INTO `course_videos` VALUES (1,'Java','Java video tutorial','upload_imgs/get-started-with-laravel-6-400x277.png',3,NULL),(5,'PHP','PHP full course for beginners','upload_imgs/2022-05-15-6280ab31c35d4.png',3,3);
/*!40000 ALTER TABLE `course_videos` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `courses`
--

DROP TABLE IF EXISTS `courses`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `courses` (
  `id` int NOT NULL AUTO_INCREMENT,
  `course_name` varchar(255) DEFAULT NULL,
  `course_description` varchar(255) DEFAULT NULL,
  `course_image` varchar(255) DEFAULT NULL,
  `user_id` int DEFAULT NULL,
  `language_id` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `course_user_id_fk` (`user_id`),
  KEY `course_language_fk` (`language_id`),
  CONSTRAINT `course_language_fk` FOREIGN KEY (`language_id`) REFERENCES `languages` (`lang_id`) ON DELETE SET NULL,
  CONSTRAINT `course_user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=72 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `courses`
--

LOCK TABLES `courses` WRITE;
/*!40000 ALTER TABLE `courses` DISABLE KEYS */;
INSERT INTO `courses` VALUES (1,'Java','Java course for beginner','upload_imgs/java.png',3,NULL),(3,'C','Full C course for beginner','upload_imgs/c.png',3,NULL),(4,'Android','Full android course for beginner','upload_imgs/2022-05-15-6280aa896a4e8.jpg',3,3),(5,'CSS','CSS course for beginner','upload_imgs/css.png',3,NULL),(56,'Kotlin','Basic kotlin for beginner','upload_imgs/kotlin-logo.png',3,NULL),(59,'HTML','HTML full course for fronted developers','upload_imgs/2022-03-14-622fb662c8c1f.jpg',3,NULL),(60,'Laravel','Laravel for beginner','upload_imgs/2022-03-14-622fb3b5eefab.png',3,NULL),(71,'PHP','PHP full course','upload_imgs/2022-05-15-6280a4e309900.png',3,3);
/*!40000 ALTER TABLE `courses` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `languages`
--

DROP TABLE IF EXISTS `languages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `languages` (
  `lang_id` int NOT NULL AUTO_INCREMENT,
  `lang_name` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`lang_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `languages`
--

LOCK TABLES `languages` WRITE;
/*!40000 ALTER TABLE `languages` DISABLE KEYS */;
INSERT INTO `languages` VALUES (3,'English'),(4,'Hindi'),(5,'Japenese'),(6,'Germanese'),(7,'Vietnamese');
/*!40000 ALTER TABLE `languages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `programming_languages`
--

DROP TABLE IF EXISTS `programming_languages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `programming_languages` (
  `id` int NOT NULL AUTO_INCREMENT,
  `lang_name` varchar(255) DEFAULT NULL,
  `lang_image` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `programming_languages`
--

LOCK TABLES `programming_languages` WRITE;
/*!40000 ALTER TABLE `programming_languages` DISABLE KEYS */;
INSERT INTO `programming_languages` VALUES (1,'Java','upload_imgs/java.png'),(3,'Android','upload_imgs/android.jpg'),(11,'Python','upload_imgs/python.png'),(17,'Kotlin','upload_imgs/kotlin-logo.png'),(24,'C','upload_imgs/2022-03-14-622fc07c7091a.png'),(25,'HTML','upload_imgs/2022-03-14-622fc38f54b66.jpg'),(27,'PHP','upload_imgs/2022-05-15-6280a4c5bc934.jpg');
/*!40000 ALTER TABLE `programming_languages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `roles`
--

DROP TABLE IF EXISTS `roles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `roles` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `roles`
--

LOCK TABLES `roles` WRITE;
/*!40000 ALTER TABLE `roles` DISABLE KEYS */;
INSERT INTO `roles` VALUES (1,'user'),(2,'admin');
/*!40000 ALTER TABLE `roles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `role_id` int NOT NULL DEFAULT '1',
  `phone` varchar(12) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `role_fk` (`role_id`),
  CONSTRAINT `role_fk` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'Ele','$2y$10$Ce/Fk1iu6yS2xFPYQIxfRuyg09lMCvyJjS3UB3MUrSc1FTR.sKvC2','guys@gmail.com',1,'0120499232'),(3,'Guys','$2y$10$mNWyBOsduRhuL.VD6CytJeCplyp65GtwxwL2Y3C.SZCIgrgGleFSG','guyskapen@gmail.com',2,NULL);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-05-15 14:40:01
